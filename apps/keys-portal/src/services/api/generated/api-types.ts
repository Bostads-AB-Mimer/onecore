/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/key-loans": {
    /**
     * List all key loans
     * @description Fetches a list of all key loans ordered by creation date.
     */
    get: {
      responses: {
        /** @description A list of key loans. */
        200: {
          content: {
            "application/json": {
              content?: {
                  /** @description The unique ID of the key loan. */
                  id?: string;
                  /** @description JSON string array of key IDs. */
                  keys?: string;
                  /** @description Contact information. */
                  contact?: string;
                  /** @description Second contact information. */
                  contact2?: string;
                  /**
                   * Format: date-time
                   * @description When keys were returned.
                   */
                  returnedAt?: string;
                  /**
                   * Format: date-time
                   * @description When keys become available for next tenant if early return.
                   */
                  availableToNextTenantFrom?: string;
                  /**
                   * Format: date-time
                   * @description When keys were picked up.
                   */
                  pickedUpAt?: string;
                  /**
                   * Format: date-time
                   * @description When the record was created.
                   */
                  createdAt?: string;
                  /**
                   * Format: date-time
                   * @description When the record was last updated.
                   */
                  updatedAt?: string;
                  /** @description Who created this record. */
                  createdBy?: string;
                  /** @description Who last updated this record. */
                  updatedBy?: string;
                }[];
            };
          };
        };
        /** @description An error occurred while listing key loans. */
        500: {
          content: {
            "application/json": {
              /** @example Internal server error */
              error?: string;
            };
          };
        };
      };
    };
    /**
     * Create a new key loan
     * @description Create a new key loan record.
     */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["CreateKeyLoanRequest"];
        };
      };
      responses: {
        /** @description Key loan created successfully. */
        201: {
          content: {
            "application/json": {
              /** @description The created key loan object. */
              content?: Record<string, never>;
            };
          };
        };
        /** @description An error occurred while creating the key loan. */
        500: {
          content: {
            "application/json": {
              /** @example Internal server error */
              error?: string;
            };
          };
        };
      };
    };
  };
  "/key-loans/search": {
    /**
     * Search key loans
     * @description Search key loans with flexible filtering.
     * - **OR search**: Use `q` with `fields` for multiple field search
     * - **AND search**: Use any KeyLoan field parameter for filtering
     * - **Comparison operators**: Prefix values with `>`, `<`, `>=`, `<=` for date/number comparisons
     * - Only one OR group is supported, but you can combine it with multiple AND filters
     */
    get: {
      parameters: {
        query?: {
          q?: string;
          /** @description Comma-separated list of fields for OR search. Defaults to contact and contact2. */
          fields?: string;
          id?: string;
          keys?: string;
          contact?: string;
          contact2?: string;
          returnedAt?: string;
          availableToNextTenantFrom?: string;
          pickedUpAt?: string;
          createdAt?: string;
          updatedAt?: string;
        };
      };
      responses: {
        /** @description Successfully retrieved search results */
        200: {
          content: {
            "application/json": {
              content?: components["schemas"]["KeyLoan"][];
            };
          };
        };
        /** @description Bad request */
        400: {
          content: never;
        };
        /** @description Internal server error */
        500: {
          content: never;
        };
      };
    };
  };
  "/key-loans/by-key/{keyId}": {
    /**
     * Get all loans for a specific key
     * @description Returns all loan records for the specified key ID, ordered by creation date DESC
     */
    get: {
      parameters: {
        path: {
          /** @description The key ID to fetch loans for */
          keyId: string;
        };
      };
      responses: {
        /** @description Array of loans for this key */
        200: {
          content: {
            "application/json": {
              content?: components["schemas"]["KeyLoan"][];
            };
          };
        };
        /** @description Internal server error */
        500: {
          content: {
            "application/json": {
              /** @example Internal server error */
              error?: string;
            };
          };
        };
      };
    };
  };
  "/key-loans/{id}": {
    /**
     * Get key loan by ID
     * @description Fetch a specific key loan by its ID.
     */
    get: {
      parameters: {
        path: {
          /** @description The unique ID of the key loan to retrieve. */
          id: string;
        };
      };
      responses: {
        /** @description A key loan object. */
        200: {
          content: {
            "application/json": {
              content?: {
                /** @description The unique ID of the key loan. */
                id?: string;
                /** @description JSON string array of key IDs. */
                keys?: string;
                /** @description Contact information. */
                contact?: string;
                /** @description Second contact information. */
                contact2?: string;
                /**
                 * Format: date-time
                 * @description When keys were returned.
                 */
                returnedAt?: string;
                /**
                 * Format: date-time
                 * @description When keys become available for next tenant.
                 */
                availableToNextTenantFrom?: string;
                /**
                 * Format: date-time
                 * @description When keys were picked up.
                 */
                pickedUpAt?: string;
                /**
                 * Format: date-time
                 * @description When the record was created.
                 */
                createdAt?: string;
                /**
                 * Format: date-time
                 * @description When the record was last updated.
                 */
                updatedAt?: string;
                /** @description Who created this record. */
                createdBy?: string;
                /** @description Who last updated this record. */
                updatedBy?: string;
              };
            };
          };
        };
        /** @description Key loan not found. */
        404: {
          content: {
            "application/json": {
              /** @example Key loan with provided id not found */
              reason?: string;
            };
          };
        };
        /** @description An error occurred while fetching the key loan. */
        500: {
          content: {
            "application/json": {
              /** @example Internal server error */
              error?: string;
            };
          };
        };
      };
    };
    /**
     * Delete a key loan
     * @description Delete an existing key loan by ID.
     */
    delete: {
      parameters: {
        path: {
          /** @description The unique ID of the key loan to delete. */
          id: string;
        };
      };
      responses: {
        /** @description Key loan deleted successfully. */
        200: {
          content: {
            "application/json": Record<string, never>;
          };
        };
        /** @description Key loan not found. */
        404: {
          content: {
            "application/json": {
              /** @example Key loan with id 12345678-1234-1234-1234-123456789abc not found */
              reason?: string;
            };
          };
        };
        /** @description An error occurred while deleting the key loan. */
        500: {
          content: {
            "application/json": {
              /** @example Internal server error */
              error?: string;
            };
          };
        };
      };
    };
    /**
     * Update a key loan
     * @description Partially update an existing key loan.
     */
    patch: {
      parameters: {
        path: {
          /** @description The unique ID of the key loan to update. */
          id: string;
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["UpdateKeyLoanRequest"];
        };
      };
      responses: {
        /** @description Key loan updated successfully. */
        200: {
          content: {
            "application/json": {
              /** @description The updated key loan object. */
              content?: Record<string, never>;
            };
          };
        };
        /** @description Key loan not found. */
        404: {
          content: {
            "application/json": {
              /** @example Key loan with id 12345678-1234-1234-1234-123456789abc not found */
              reason?: string;
            };
          };
        };
        /** @description An error occurred while updating the key loan. */
        500: {
          content: {
            "application/json": {
              /** @example Internal server error */
              error?: string;
            };
          };
        };
      };
    };
  };
  "/key-notes/by-rental-object/{rentalObjectCode}": {
    /**
     * Get all key notes by rental object code
     * @description Returns all key notes associated with a specific rental object code.
     */
    get: {
      parameters: {
        path: {
          /** @description The rental object code to filter key notes by. */
          rentalObjectCode: string;
        };
      };
      responses: {
        /** @description List of key notes for the rental object code. */
        200: {
          content: {
            "application/json": {
              content?: components["schemas"]["KeyNote"][];
            };
          };
        };
        /** @description An error occurred while fetching key notes. */
        500: {
          content: never;
        };
      };
    };
  };
  "/key-notes/{id}": {
    /**
     * Get key note by ID
     * @description Fetch a specific key note by its ID.
     */
    get: {
      parameters: {
        path: {
          /** @description The unique ID of the key note to retrieve. */
          id: string;
        };
      };
      responses: {
        /** @description A key note object. */
        200: {
          content: {
            "application/json": {
              content?: components["schemas"]["KeyNote"];
            };
          };
        };
        /** @description Key note not found. */
        404: {
          content: never;
        };
        /** @description An error occurred while fetching the key note. */
        500: {
          content: never;
        };
      };
    };
    /**
     * Update a key note
     * @description Update the description of an existing key note.
     */
    patch: {
      parameters: {
        path: {
          /** @description The unique ID of the key note to update. */
          id: string;
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["UpdateKeyNoteRequest"];
        };
      };
      responses: {
        /** @description Key note updated successfully. */
        200: {
          content: {
            "application/json": {
              content?: components["schemas"]["KeyNote"];
            };
          };
        };
        /** @description Invalid request body. */
        400: {
          content: never;
        };
        /** @description Key note not found. */
        404: {
          content: never;
        };
        /** @description An error occurred while updating the key note. */
        500: {
          content: never;
        };
      };
    };
  };
  "/key-notes": {
    /**
     * Create a key note
     * @description Create a new key note record.
     */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["CreateKeyNoteRequest"];
        };
      };
      responses: {
        /** @description Key note created successfully. */
        201: {
          content: {
            "application/json": {
              content?: components["schemas"]["KeyNote"];
            };
          };
        };
        /** @description Invalid request body. */
        400: {
          content: never;
        };
        /** @description An error occurred while creating the key note. */
        500: {
          content: never;
        };
      };
    };
  };
  "/key-systems": {
    /**
     * List all key systems with pagination
     * @description Retrieve a paginated list of all key systems
     */
    get: {
      parameters: {
        query?: {
          /** @description Page number (starts from 1) */
          page?: number;
          /** @description Number of records per page */
          limit?: number;
        };
      };
      responses: {
        /** @description Successfully retrieved key systems */
        200: {
          content: {
            "application/json": components["schemas"]["PaginatedKeySystemsResponse"];
          };
        };
        /** @description Internal server error */
        500: {
          content: never;
        };
      };
    };
    /**
     * Create a new key system
     * @description Create a new key system
     */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["CreateKeySystemRequest"];
        };
      };
      responses: {
        /** @description Key system created successfully */
        201: {
          content: {
            "application/json": {
              /** @description Created key system details */
              content?: Record<string, never>;
            };
          };
        };
        /** @description Invalid type */
        400: {
          content: never;
        };
        /** @description Key system with this system code already exists */
        409: {
          content: never;
        };
        /** @description Internal server error */
        500: {
          content: never;
        };
      };
    };
  };
  "/key-systems/search": {
    /**
     * Search key systems
     * @description Search key systems with flexible filtering.
     * - **OR search**: Use `q` with `fields` for multiple field search
     * - **AND search**: Use any KeySystem field parameter for filtering
     * - **Comparison operators**: Prefix values with `>`, `<`, `>=`, `<=` for date/number comparisons
     * - Only one OR group is supported, but you can combine it with multiple AND filters
     *
     * Examples:
     * - `?createdAt=>2024-01-01` - Created after Jan 1, 2024
     * - `?manufacturer=assa&createdAt=<2024-12-31` - Manufacturer contains "assa" AND created before Dec 31, 2024
     */
    get: {
      parameters: {
        query?: {
          /** @description Page number (starts from 1) */
          page?: number;
          /** @description Number of records per page */
          limit?: number;
          /** @description Search query for OR search across fields specified in 'fields' parameter */
          q?: string;
          /** @description Comma-separated list of fields for OR search (e.g., "systemCode,manufacturer"). Defaults to systemCode. */
          fields?: string;
          id?: string;
          systemCode?: string;
          name?: string;
          manufacturer?: string;
          managingSupplier?: string;
          type?: string;
          propertyIds?: string;
          installationDate?: string;
          isActive?: string;
          description?: string;
          createdAt?: string;
          updatedAt?: string;
          createdBy?: string;
          updatedBy?: string;
        };
      };
      responses: {
        /** @description Successfully retrieved paginated search results */
        200: {
          content: {
            "application/json": components["schemas"]["PaginatedKeySystemsResponse"];
          };
        };
        /** @description Bad request. Invalid parameters or field names */
        400: {
          content: never;
        };
        /** @description Internal server error */
        500: {
          content: never;
        };
      };
    };
  };
  "/key-systems/{id}": {
    /**
     * Get key system by ID
     * @description Retrieve a specific key system by its ID
     */
    get: {
      parameters: {
        path: {
          /** @description The ID of the key system */
          id: string;
        };
      };
      responses: {
        /** @description Successfully retrieved key system */
        200: {
          content: {
            "application/json": {
              /** @description Key system details */
              content?: Record<string, never>;
            };
          };
        };
        /** @description Key system not found */
        404: {
          content: never;
        };
        /** @description Internal server error */
        500: {
          content: never;
        };
      };
    };
    /**
     * Delete a key system
     * @description Delete a key system by ID
     */
    delete: {
      parameters: {
        path: {
          /** @description The ID of the key system to delete */
          id: string;
        };
      };
      responses: {
        /** @description Key system deleted successfully */
        200: {
          content: never;
        };
        /** @description Key system not found */
        404: {
          content: never;
        };
        /** @description Internal server error */
        500: {
          content: never;
        };
      };
    };
    /**
     * Update a key system
     * @description Partially update a key system
     */
    patch: {
      parameters: {
        path: {
          /** @description The ID of the key system to update */
          id: string;
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["UpdateKeySystemRequest"];
        };
      };
      responses: {
        /** @description Key system updated successfully */
        200: {
          content: {
            "application/json": {
              /** @description Updated key system details */
              content?: Record<string, never>;
            };
          };
        };
        /** @description Invalid type */
        400: {
          content: never;
        };
        /** @description Key system not found */
        404: {
          content: never;
        };
        /** @description Key system with this system code already exists */
        409: {
          content: never;
        };
        /** @description Internal server error */
        500: {
          content: never;
        };
      };
    };
  };
  "/keys": {
    /**
     * List keys with pagination
     * @description Returns paginated keys ordered by createdAt (desc).
     */
    get: {
      parameters: {
        query?: {
          /** @description Page number (starts from 1) */
          page?: number;
          /** @description Number of records per page */
          limit?: number;
        };
      };
      responses: {
        /** @description A paginated list of keys. */
        200: {
          content: {
            "application/json": components["schemas"]["PaginatedKeysResponse"];
          };
        };
        /** @description An error occurred while listing keys. */
        500: {
          content: {
            "application/json": {
              /** @example Internal server error */
              error?: string;
            };
          };
        };
      };
    };
    /**
     * Create a key
     * @description Create a new key record.
     */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["CreateKeyRequest"];
        };
      };
      responses: {
        /** @description Key created successfully. */
        201: {
          content: {
            "application/json": {
              content?: components["schemas"]["Key"];
            };
          };
        };
        /** @description Invalid request body. */
        400: {
          content: {
            "application/json": {
              /** @example Invalid request body */
              error?: string;
            };
          };
        };
        /** @description An error occurred while creating the key. */
        500: {
          content: {
            "application/json": {
              /** @example Internal server error */
              error?: string;
            };
          };
        };
      };
    };
  };
  "/keys/search": {
    /**
     * Search keys with pagination
     * @description Search keys with flexible filtering and pagination support.
     * - **OR search**: Use `q` with `fields` for fuzzy LIKE search across multiple fields
     * - **AND search**: Use any Key field parameter for exact match filtering (uses strict equality)
     * - **Comparison operators**: Prefix values with `>`, `<`, `>=`, `<=` for date/number comparisons
     * - Only one OR group is supported, but you can combine it with multiple AND filters
     *
     * Examples:
     * - `?q=master&fields=keyName` - Fuzzy search for "master" in keyName
     * - `?keyType=LGH` - Exact match for keyType = 'LGH'
     * - `?disposed=true` - Show only disposed keys
     * - `?createdAt=>2024-01-01` - Created after Jan 1, 2024
     * - `?keyType=LGH&createdAt=<2024-12-31` - Exact keyType AND created before Dec 31, 2024
     */
    get: {
      parameters: {
        query?: {
          /** @description Page number (starts from 1) */
          page?: number;
          /** @description Number of records per page */
          limit?: number;
          /** @description Search query for OR search across fields specified in 'fields' parameter */
          q?: string;
          /** @description Comma-separated list of fields for OR search (e.g., "keyName,keyType"). Defaults to keyName. */
          fields?: string;
          id?: string;
          keyName?: string;
          keySequenceNumber?: string;
          flexNumber?: string;
          rentalObjectCode?: string;
          keyType?: string;
          keySystemId?: string;
          createdAt?: string;
          updatedAt?: string;
        };
      };
      responses: {
        /** @description Successfully retrieved search results */
        200: {
          content: {
            "application/json": {
              content?: components["schemas"]["Key"][];
            };
          };
        };
        /** @description Bad request. Invalid parameters or field names */
        400: {
          content: never;
        };
        /** @description Internal server error */
        500: {
          content: never;
        };
      };
    };
  };
  "/keys/by-rental-object/{rentalObjectCode}": {
    /**
     * Get all keys by rental object code
     * @description Returns all keys associated with a specific rental object code without pagination.
     */
    get: {
      parameters: {
        path: {
          /** @description The rental object code to filter keys by. */
          rentalObjectCode: string;
        };
      };
      responses: {
        /** @description List of keys for the rental object code. */
        200: {
          content: {
            "application/json": {
              content?: components["schemas"]["Key"][];
            };
          };
        };
        /** @description An error occurred while fetching keys. */
        500: {
          content: {
            "application/json": {
              /** @example Internal server error */
              error?: string;
            };
          };
        };
      };
    };
  };
  "/keys/with-loan-status/{rentalObjectCode}": {
    /**
     * Get keys with active loan status enriched
     * @description Returns all relevant keys for a rental object with their active loan information
     * pre-fetched in a single optimized query. This eliminates N+1 query problems.
     *
     * **Performance**: ~95% faster than fetching keys then looping for loan status.
     */
    get: {
      parameters: {
        path: {
          /** @description The rental object code to filter keys by. */
          rentalObjectCode: string;
        };
      };
      responses: {
        /** @description List of keys with enriched active loan data. */
        200: {
          content: {
            "application/json": {
              content?: components["schemas"]["KeyWithLoanStatus"][];
            };
          };
        };
        /** @description An error occurred while fetching keys. */
        500: {
          content: {
            "application/json": {
              /** @example Internal server error */
              error?: string;
            };
          };
        };
      };
    };
  };
  "/keys/{id}": {
    /**
     * Get key by ID
     * @description Fetch a specific key by its ID.
     */
    get: {
      parameters: {
        path: {
          /** @description The unique ID of the key to retrieve. */
          id: string;
        };
      };
      responses: {
        /** @description A key object. */
        200: {
          content: {
            "application/json": {
              content?: components["schemas"]["Key"];
            };
          };
        };
        /** @description Key not found. */
        404: {
          content: {
            "application/json": {
              /** @example Key not found */
              reason?: string;
            };
          };
        };
        /** @description An error occurred while fetching the key. */
        500: {
          content: {
            "application/json": {
              /** @example Internal server error */
              error?: string;
            };
          };
        };
      };
    };
    /**
     * Delete a key
     * @description Delete an existing key by ID.
     */
    delete: {
      parameters: {
        path: {
          /** @description The unique ID of the key to delete. */
          id: string;
        };
      };
      responses: {
        /** @description Key deleted successfully. */
        200: {
          content: {
            "application/json": Record<string, never>;
          };
        };
        /** @description Key not found. */
        404: {
          content: {
            "application/json": {
              /** @example Key not found */
              reason?: string;
            };
          };
        };
        /** @description An error occurred while deleting the key. */
        500: {
          content: {
            "application/json": {
              /** @example Internal server error */
              error?: string;
            };
          };
        };
      };
    };
    /**
     * Update a key
     * @description Partially update an existing key.
     */
    patch: {
      parameters: {
        path: {
          /** @description The unique ID of the key to update. */
          id: string;
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["UpdateKeyRequest"];
        };
      };
      responses: {
        /** @description Key updated successfully. */
        200: {
          content: {
            "application/json": {
              content?: components["schemas"]["Key"];
            };
          };
        };
        /** @description Invalid request body. */
        400: {
          content: {
            "application/json": {
              /** @example Invalid request body */
              error?: string;
            };
          };
        };
        /** @description Key not found. */
        404: {
          content: {
            "application/json": {
              /** @example Key not found */
              reason?: string;
            };
          };
        };
        /** @description An error occurred while updating the key. */
        500: {
          content: {
            "application/json": {
              /** @example Internal server error */
              error?: string;
            };
          };
        };
      };
    };
  };
  "/keys/bulk-update-flex": {
    /**
     * Bulk update flex number for all keys on a rental object
     * @description Update the flex number for all keys associated with a specific rental object code. Flex numbers range from 1-3.
     */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["BulkUpdateFlexRequest"];
        };
      };
      responses: {
        /** @description Flex numbers updated successfully. */
        200: {
          content: {
            "application/json": {
              content?: {
                /** @description Number of keys updated */
                updatedCount?: number;
              };
            };
          };
        };
        /** @description Invalid request body. */
        400: {
          content: {
            "application/json": {
              /** @example Invalid request body */
              error?: string;
            };
          };
        };
        /** @description An error occurred while updating keys. */
        500: {
          content: {
            "application/json": {
              /** @example Internal server error */
              error?: string;
            };
          };
        };
      };
    };
  };
  "/logs": {
    /**
     * List logs with pagination
     * @description Returns paginated logs (most recent per objectId) ordered by eventTime (desc).
     */
    get: {
      parameters: {
        query?: {
          /** @description Page number (starts from 1) */
          page?: number;
          /** @description Number of records per page */
          limit?: number;
        };
      };
      responses: {
        /** @description A paginated list of logs */
        200: {
          content: {
            "application/json": components["schemas"]["PaginatedLogsResponse"];
          };
        };
        /** @description Server error */
        500: {
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
      };
    };
    /** Create a log */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["CreateLogRequest"];
        };
      };
      responses: {
        /** @description Created */
        201: {
          content: {
            "application/json": {
              content?: components["schemas"]["Log"];
            };
          };
        };
        /** @description Invalid or missing fields */
        400: {
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
        /** @description Server error */
        500: {
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
      };
    };
  };
  "/logs/search": {
    /**
     * Search logs with pagination
     * @description Search logs with flexible filtering and pagination.
     * - **OR search**: Use `q` with `fields` for multiple field search
     * - **AND search**: Use any Log field parameter for filtering
     * - **Comparison operators**: Prefix values with `>`, `<`, `>=`, `<=` for date/number comparisons
     * - Only one OR group is supported, but you can combine it with multiple AND filters
     */
    get: {
      parameters: {
        query?: {
          /** @description Page number (starts from 1) */
          page?: number;
          /** @description Number of records per page */
          limit?: number;
          q?: string;
          /** @description Comma-separated list of fields for OR search. Defaults to objectId and userName. */
          fields?: string;
          id?: string;
          userName?: string;
          eventType?: string;
          eventTime?: string;
          objectType?: string;
          objectId?: string;
          description?: string;
        };
      };
      responses: {
        /** @description Successfully retrieved paginated search results */
        200: {
          content: {
            "application/json": components["schemas"]["PaginatedLogsResponse"];
          };
        };
        /** @description Bad request */
        400: {
          content: never;
        };
        /** @description Internal server error */
        500: {
          content: never;
        };
      };
    };
  };
  "/logs/object/{objectId}": {
    /**
     * Get all logs for a specific objectId
     * @description Returns all log entries for a given objectId, ordered by most recent first
     */
    get: {
      parameters: {
        path: {
          objectId: string;
        };
      };
      responses: {
        /** @description List of logs for the objectId */
        200: {
          content: {
            "application/json": {
              content?: components["schemas"]["Log"][];
            };
          };
        };
        /** @description Server error */
        500: {
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
      };
    };
  };
  "/logs/{id}": {
    /** Get log by ID */
    get: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** @description Log found */
        200: {
          content: {
            "application/json": {
              content?: components["schemas"]["Log"];
            };
          };
        };
        /** @description Not found */
        404: {
          content: {
            "application/json": components["schemas"]["NotFoundResponse"];
          };
        };
        /** @description Server error */
        500: {
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
      };
    };
  };
  "/receipts": {
    /** Create a receipt */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["CreateReceiptRequest"];
        };
      };
      responses: {
        /** @description Receipt created */
        201: {
          content: {
            "application/json": {
              content?: components["schemas"]["Receipt"];
            };
          };
        };
        /** @description Receipt already exists for this keyLoanId */
        409: {
          content: never;
        };
      };
    };
  };
  "/receipts/{id}": {
    /** Get a receipt by ID */
    get: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** @description Receipt */
        200: {
          content: {
            "application/json": {
              content?: components["schemas"]["Receipt"];
            };
          };
        };
        /** @description Receipt not found */
        404: {
          content: never;
        };
      };
    };
    /** Delete a receipt by id (and associated file) */
    delete: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** @description Deleted */
        204: {
          content: never;
        };
        /** @description Receipt not found */
        404: {
          content: never;
        };
      };
    };
    /** Update a receipt (allows marking as signed) */
    patch: {
      parameters: {
        path: {
          id: string;
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["UpdateReceiptRequest"];
        };
      };
      responses: {
        /** @description Receipt updated */
        200: {
          content: {
            "application/json": {
              content?: components["schemas"]["Receipt"];
            };
          };
        };
        /** @description Receipt not found */
        404: {
          content: never;
        };
      };
    };
  };
  "/receipts/by-key-loan/{keyLoanId}": {
    /** Get receipt by keyLoanId */
    get: {
      parameters: {
        path: {
          keyLoanId: string;
        };
      };
      responses: {
        /** @description Receipt */
        200: {
          content: never;
        };
        /** @description Receipt not found */
        404: {
          content: never;
        };
      };
    };
  };
  "/receipts/{id}/upload": {
    /** Upload PDF file for a receipt */
    post: {
      parameters: {
        path: {
          id: string;
        };
      };
      requestBody: {
        content: {
          "multipart/form-data": {
            /** Format: binary */
            file?: string;
          };
        };
      };
      responses: {
        /** @description File uploaded successfully */
        200: {
          content: never;
        };
        /** @description Invalid file or receipt not found */
        400: {
          content: never;
        };
        /** @description Receipt not found */
        404: {
          content: never;
        };
        /** @description File too large */
        413: {
          content: never;
        };
      };
    };
  };
  "/receipts/{id}/download": {
    /** Get presigned download URL for receipt PDF */
    get: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** @description Download URL generated */
        200: {
          content: {
            "application/json": {
              url?: string;
              expiresIn?: number;
            };
          };
        };
        /** @description Receipt or file not found */
        404: {
          content: never;
        };
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    CreateKeyRequest: components["schemas"]["CreateKeyRequest"];
    UpdateKeyRequest: components["schemas"]["UpdateKeyRequest"];
    BulkUpdateFlexRequest: {
      rentalObjectCode: string;
      flexNumber: number;
    };
    Key: components["schemas"]["Key"];
    KeyWithLoanStatus: {
      /** Format: uuid */
      id: string;
      keyName: string;
      keySequenceNumber?: number;
      flexNumber?: number;
      rentalObjectCode?: string;
      /** @enum {string} */
      keyType: "LGH" | "PB" | "FS" | "HN";
      /** Format: uuid */
      keySystemId?: string | null;
      /** @default false */
      disposed?: boolean;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      /** Format: uuid */
      activeLoanId: string | null;
      activeLoanContact: string | null;
      activeLoanContact2: string | null;
      /** Format: date-time */
      activeLoanPickedUpAt: string | null;
      /** Format: date-time */
      activeLoanAvailableFrom: string | null;
      /** Format: date-time */
      prevLoanAvailableFrom: string | null;
      prevLoanContact: string | null;
      prevLoanContact2: string | null;
    };
    PaginationMeta: {
      totalRecords: number;
      page: number;
      limit: number;
      count: number;
    };
    PaginationLinks: {
      href: string;
      /** @enum {string} */
      rel: "self" | "first" | "last" | "prev" | "next";
    };
    PaginatedKeysResponse: {
      content: ({
          /** Format: uuid */
          id: string;
          keyName: string;
          keySequenceNumber?: number;
          flexNumber?: number;
          rentalObjectCode?: string;
          /** @enum {string} */
          keyType: "LGH" | "PB" | "FS" | "HN";
          /** Format: uuid */
          keySystemId?: string | null;
          /** @default false */
          disposed?: boolean;
          /** Format: date-time */
          createdAt: string;
          /** Format: date-time */
          updatedAt: string;
        })[];
      _meta: {
        totalRecords: number;
        page: number;
        limit: number;
        count: number;
      };
      _links: ({
          href: string;
          /** @enum {string} */
          rel: "self" | "first" | "last" | "prev" | "next";
        })[];
    };
    CreateKeySystemRequest: components["schemas"]["CreateKeySystemRequest"];
    UpdateKeySystemRequest: components["schemas"]["UpdateKeySystemRequest"];
    KeySystem: components["schemas"]["KeySystem"];
    PaginatedKeySystemsResponse: {
      content: ({
          /** Format: uuid */
          id: string;
          systemCode: string;
          name: string;
          manufacturer: string;
          managingSupplier?: string | null;
          /** @enum {string} */
          type: "MECHANICAL" | "ELECTRONIC" | "HYBRID";
          propertyIds?: string;
          /** Format: date-time */
          installationDate?: string | null;
          isActive?: boolean;
          description?: string | null;
          /** Format: date-time */
          createdAt: string;
          /** Format: date-time */
          updatedAt: string;
          createdBy?: string | null;
          updatedBy?: string | null;
        })[];
      _meta: {
        totalRecords: number;
        page: number;
        limit: number;
        count: number;
      };
      _links: ({
          href: string;
          /** @enum {string} */
          rel: "self" | "first" | "last" | "prev" | "next";
        })[];
    };
    CreateKeyLoanRequest: components["schemas"]["CreateKeyLoanRequest"];
    UpdateKeyLoanRequest: components["schemas"]["UpdateKeyLoanRequest"];
    KeyLoan: components["schemas"]["KeyLoan"];
    CreateLogRequest: components["schemas"]["CreateLogRequest"];
    Log: components["schemas"]["Log"];
    PaginatedLogsResponse: components["schemas"]["PaginatedLogsResponse"];
    CreateReceiptRequest: {
      /** Format: uuid */
      keyLoanId: string;
      /** @enum {string} */
      receiptType: "LOAN" | "RETURN";
      /** @enum {string} */
      type?: "DIGITAL" | "PHYSICAL";
      fileId?: string;
    };
    UpdateReceiptRequest: {
      fileId?: string;
    };
    Receipt: {
      /** Format: uuid */
      id: string;
      /** Format: uuid */
      keyLoanId: string;
      /** @enum {string} */
      receiptType: "LOAN" | "RETURN";
      /** @enum {string} */
      type: "DIGITAL" | "PHYSICAL";
      fileId?: string | null;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
    };
    CreateKeyNoteRequest: components["schemas"]["CreateKeyNoteRequest"];
    UpdateKeyNoteRequest: components["schemas"]["UpdateKeyNoteRequest"];
    KeyNote: components["schemas"]["KeyNote"];
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export type operations = Record<string, never>;
