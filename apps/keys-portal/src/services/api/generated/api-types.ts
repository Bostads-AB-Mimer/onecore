/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/key-loans": {
    /**
     * List all key loans
     * @description Fetches a list of all key loans ordered by creation date.
     */
    get: {
      responses: {
        /** @description A list of key loans. */
        200: {
          content: {
            "application/json": {
              content?: {
                  /** @description The unique ID of the key loan. */
                  id?: string;
                  /** @description JSON string array of key IDs. */
                  keys?: string;
                  /** @description Contact information. */
                  contact?: string;
                  /** @description Lease identifier. */
                  lease?: string;
                  /**
                   * Format: date-time
                   * @description When keys were returned.
                   */
                  returnedAt?: string;
                  /**
                   * Format: date-time
                   * @description When keys become available for next tenant if early return.
                   */
                  availableToNextTenantFrom?: string;
                  /**
                   * Format: date-time
                   * @description When keys were picked up.
                   */
                  pickedUpAt?: string;
                  /**
                   * Format: date-time
                   * @description When the record was created.
                   */
                  createdAt?: string;
                  /**
                   * Format: date-time
                   * @description When the record was last updated.
                   */
                  updatedAt?: string;
                  /** @description Who created this record. */
                  createdBy?: string;
                  /** @description Who last updated this record. */
                  updatedBy?: string;
                }[];
            };
          };
        };
        /** @description An error occurred while listing key loans. */
        500: {
          content: {
            "application/json": {
              /** @example Internal server error */
              error?: string;
            };
          };
        };
      };
    };
    /**
     * Create a new key loan
     * @description Create a new key loan record.
     */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["CreateKeyLoanRequest"];
        };
      };
      responses: {
        /** @description Key loan created successfully. */
        201: {
          content: {
            "application/json": {
              /** @description The created key loan object. */
              content?: Record<string, never>;
            };
          };
        };
        /** @description An error occurred while creating the key loan. */
        500: {
          content: {
            "application/json": {
              /** @example Internal server error */
              error?: string;
            };
          };
        };
      };
    };
  };
  "/key-loans/{id}": {
    /**
     * Get key loan by ID
     * @description Fetch a specific key loan by its ID.
     */
    get: {
      parameters: {
        path: {
          /** @description The unique ID of the key loan to retrieve. */
          id: string;
        };
      };
      responses: {
        /** @description A key loan object. */
        200: {
          content: {
            "application/json": {
              content?: {
                /** @description The unique ID of the key loan. */
                id?: string;
                /** @description JSON string array of key IDs. */
                keys?: string;
                /** @description Contact information. */
                contact?: string;
                /** @description Lease identifier. */
                lease?: string;
                /**
                 * Format: date-time
                 * @description When keys were returned.
                 */
                returnedAt?: string;
                /**
                 * Format: date-time
                 * @description When keys become available for next tenant.
                 */
                availableToNextTenantFrom?: string;
                /**
                 * Format: date-time
                 * @description When keys were picked up.
                 */
                pickedUpAt?: string;
                /**
                 * Format: date-time
                 * @description When the record was created.
                 */
                createdAt?: string;
                /**
                 * Format: date-time
                 * @description When the record was last updated.
                 */
                updatedAt?: string;
                /** @description Who created this record. */
                createdBy?: string;
                /** @description Who last updated this record. */
                updatedBy?: string;
              };
            };
          };
        };
        /** @description Key loan not found. */
        404: {
          content: {
            "application/json": {
              /** @example Key loan with provided id not found */
              reason?: string;
            };
          };
        };
        /** @description An error occurred while fetching the key loan. */
        500: {
          content: {
            "application/json": {
              /** @example Internal server error */
              error?: string;
            };
          };
        };
      };
    };
    /**
     * Delete a key loan
     * @description Delete an existing key loan by ID.
     */
    delete: {
      parameters: {
        path: {
          /** @description The unique ID of the key loan to delete. */
          id: string;
        };
      };
      responses: {
        /** @description Key loan deleted successfully. */
        200: {
          content: {
            "application/json": Record<string, never>;
          };
        };
        /** @description Key loan not found. */
        404: {
          content: {
            "application/json": {
              /** @example Key loan with id 12345678-1234-1234-1234-123456789abc not found */
              reason?: string;
            };
          };
        };
        /** @description An error occurred while deleting the key loan. */
        500: {
          content: {
            "application/json": {
              /** @example Internal server error */
              error?: string;
            };
          };
        };
      };
    };
    /**
     * Update a key loan
     * @description Partially update an existing key loan.
     */
    patch: {
      parameters: {
        path: {
          /** @description The unique ID of the key loan to update. */
          id: string;
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["UpdateKeyLoanRequest"];
        };
      };
      responses: {
        /** @description Key loan updated successfully. */
        200: {
          content: {
            "application/json": {
              /** @description The updated key loan object. */
              content?: Record<string, never>;
            };
          };
        };
        /** @description Key loan not found. */
        404: {
          content: {
            "application/json": {
              /** @example Key loan with id 12345678-1234-1234-1234-123456789abc not found */
              reason?: string;
            };
          };
        };
        /** @description An error occurred while updating the key loan. */
        500: {
          content: {
            "application/json": {
              /** @example Internal server error */
              error?: string;
            };
          };
        };
      };
    };
  };
  "/key-systems": {
    /**
     * List all key systems
     * @description Retrieve a list of all key systems
     */
    get: {
      responses: {
        /** @description Successfully retrieved key systems */
        200: {
          content: {
            "application/json": {
              content?: Record<string, never>[];
            };
          };
        };
        /** @description Internal server error */
        500: {
          content: never;
        };
      };
    };
    /**
     * Create a new key system
     * @description Create a new key system
     */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["CreateKeySystemRequest"];
        };
      };
      responses: {
        /** @description Key system created successfully */
        201: {
          content: {
            "application/json": {
              /** @description Created key system details */
              content?: Record<string, never>;
            };
          };
        };
        /** @description Invalid type */
        400: {
          content: never;
        };
        /** @description Key system with this system code already exists */
        409: {
          content: never;
        };
        /** @description Internal server error */
        500: {
          content: never;
        };
      };
    };
  };
  "/key-systems/search": {
    /**
     * Search key systems by system code
     * @description Search key systems based on a query string matching the systemCode field
     */
    get: {
      parameters: {
        query: {
          /** @description The search query string (minimum 3 characters) */
          q: string;
        };
      };
      responses: {
        /** @description Successfully retrieved search results */
        200: {
          content: {
            "application/json": {
              content?: components["schemas"]["KeySystem"][];
            };
          };
        };
        /** @description Bad request. Query parameter must be at least 3 characters */
        400: {
          content: never;
        };
        /** @description Internal server error */
        500: {
          content: never;
        };
      };
    };
  };
  "/key-systems/{id}": {
    /**
     * Get key system by ID
     * @description Retrieve a specific key system by its ID
     */
    get: {
      parameters: {
        path: {
          /** @description The ID of the key system */
          id: string;
        };
      };
      responses: {
        /** @description Successfully retrieved key system */
        200: {
          content: {
            "application/json": {
              /** @description Key system details */
              content?: Record<string, never>;
            };
          };
        };
        /** @description Key system not found */
        404: {
          content: never;
        };
        /** @description Internal server error */
        500: {
          content: never;
        };
      };
    };
    /**
     * Delete a key system
     * @description Delete a key system by ID
     */
    delete: {
      parameters: {
        path: {
          /** @description The ID of the key system to delete */
          id: string;
        };
      };
      responses: {
        /** @description Key system deleted successfully */
        200: {
          content: never;
        };
        /** @description Key system not found */
        404: {
          content: never;
        };
        /** @description Internal server error */
        500: {
          content: never;
        };
      };
    };
    /**
     * Update a key system
     * @description Partially update a key system
     */
    patch: {
      parameters: {
        path: {
          /** @description The ID of the key system to update */
          id: string;
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["UpdateKeySystemRequest"];
        };
      };
      responses: {
        /** @description Key system updated successfully */
        200: {
          content: {
            "application/json": {
              /** @description Updated key system details */
              content?: Record<string, never>;
            };
          };
        };
        /** @description Invalid type */
        400: {
          content: never;
        };
        /** @description Key system not found */
        404: {
          content: never;
        };
        /** @description Key system with this system code already exists */
        409: {
          content: never;
        };
        /** @description Internal server error */
        500: {
          content: never;
        };
      };
    };
  };
  "/keys": {
    /**
     * List keys
     * @description Returns keys ordered by createdAt (desc).
     */
    get: {
      responses: {
        /** @description A list of keys. */
        200: {
          content: {
            "application/json": {
              content?: components["schemas"]["Key"][];
            };
          };
        };
        /** @description An error occurred while listing keys. */
        500: {
          content: {
            "application/json": {
              /** @example Internal server error */
              error?: string;
            };
          };
        };
      };
    };
    /**
     * Create a key
     * @description Create a new key record.
     */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["CreateKeyRequest"];
        };
      };
      responses: {
        /** @description Key created successfully. */
        201: {
          content: {
            "application/json": {
              content?: components["schemas"]["Key"];
            };
          };
        };
        /** @description Invalid request body. */
        400: {
          content: {
            "application/json": {
              /** @example Invalid request body */
              error?: string;
            };
          };
        };
        /** @description An error occurred while creating the key. */
        500: {
          content: {
            "application/json": {
              /** @example Internal server error */
              error?: string;
            };
          };
        };
      };
    };
  };
  "/keys/{id}": {
    /**
     * Get key by ID
     * @description Fetch a specific key by its ID.
     */
    get: {
      parameters: {
        path: {
          /** @description The unique ID of the key to retrieve. */
          id: string;
        };
      };
      responses: {
        /** @description A key object. */
        200: {
          content: {
            "application/json": {
              content?: components["schemas"]["Key"];
            };
          };
        };
        /** @description Key not found. */
        404: {
          content: {
            "application/json": {
              /** @example Key not found */
              reason?: string;
            };
          };
        };
        /** @description An error occurred while fetching the key. */
        500: {
          content: {
            "application/json": {
              /** @example Internal server error */
              error?: string;
            };
          };
        };
      };
    };
    /**
     * Delete a key
     * @description Delete an existing key by ID.
     */
    delete: {
      parameters: {
        path: {
          /** @description The unique ID of the key to delete. */
          id: string;
        };
      };
      responses: {
        /** @description Key deleted successfully. */
        200: {
          content: {
            "application/json": Record<string, never>;
          };
        };
        /** @description Key not found. */
        404: {
          content: {
            "application/json": {
              /** @example Key not found */
              reason?: string;
            };
          };
        };
        /** @description An error occurred while deleting the key. */
        500: {
          content: {
            "application/json": {
              /** @example Internal server error */
              error?: string;
            };
          };
        };
      };
    };
    /**
     * Update a key
     * @description Partially update an existing key.
     */
    patch: {
      parameters: {
        path: {
          /** @description The unique ID of the key to update. */
          id: string;
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["UpdateKeyRequest"];
        };
      };
      responses: {
        /** @description Key updated successfully. */
        200: {
          content: {
            "application/json": {
              content?: components["schemas"]["Key"];
            };
          };
        };
        /** @description Invalid request body. */
        400: {
          content: {
            "application/json": {
              /** @example Invalid request body */
              error?: string;
            };
          };
        };
        /** @description Key not found. */
        404: {
          content: {
            "application/json": {
              /** @example Key not found */
              reason?: string;
            };
          };
        };
        /** @description An error occurred while updating the key. */
        500: {
          content: {
            "application/json": {
              /** @example Internal server error */
              error?: string;
            };
          };
        };
      };
    };
  };
  "/logs": {
    /**
     * List logs
     * @description Returns logs ordered by eventTime (desc).
     */
    get: {
      responses: {
        /** @description List of logs */
        200: {
          content: {
            "application/json": {
              content?: components["schemas"]["Log"][];
            };
          };
        };
        /** @description Server error */
        500: {
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
      };
    };
    /** Create a log */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["CreateLogRequest"];
        };
      };
      responses: {
        /** @description Created */
        201: {
          content: {
            "application/json": {
              content?: components["schemas"]["Log"];
            };
          };
        };
        /** @description Invalid or missing fields */
        400: {
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
        /** @description Server error */
        500: {
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
      };
    };
  };
  "/logs/{id}": {
    /** Get log by ID */
    get: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** @description Log found */
        200: {
          content: {
            "application/json": {
              content?: components["schemas"]["Log"];
            };
          };
        };
        /** @description Not found */
        404: {
          content: {
            "application/json": components["schemas"]["NotFoundResponse"];
          };
        };
        /** @description Server error */
        500: {
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
      };
    };
    /** Delete a log */
    delete: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** @description Deleted */
        200: {
          content: never;
        };
        /** @description Not found */
        404: {
          content: {
            "application/json": components["schemas"]["NotFoundResponse"];
          };
        };
        /** @description Server error */
        500: {
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
      };
    };
    /** Update a log (partial) */
    patch: {
      parameters: {
        path: {
          id: string;
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["UpdateLogRequest"];
        };
      };
      responses: {
        /** @description Updated */
        200: {
          content: {
            "application/json": {
              content?: components["schemas"]["Log"];
            };
          };
        };
        /** @description Invalid eventType or objectType */
        400: {
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
        /** @description Not found */
        404: {
          content: {
            "application/json": components["schemas"]["NotFoundResponse"];
          };
        };
        /** @description Server error */
        500: {
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    CreateKeyRequest: components["schemas"]["CreateKeyRequest"];
    UpdateKeyRequest: components["schemas"]["UpdateKeyRequest"];
    Key: components["schemas"]["Key"];
    CreateKeySystemRequest: components["schemas"]["CreateKeySystemRequest"];
    UpdateKeySystemRequest: components["schemas"]["UpdateKeySystemRequest"];
    KeySystem: components["schemas"]["KeySystem"];
    CreateKeyLoanRequest: components["schemas"]["CreateKeyLoanRequest"];
    UpdateKeyLoanRequest: components["schemas"]["UpdateKeyLoanRequest"];
    KeyLoan: components["schemas"]["KeyLoan"];
    CreateLogRequest: components["schemas"]["CreateLogRequest"];
    UpdateLogRequest: components["schemas"]["UpdateLogRequest"];
    Log: components["schemas"]["Log"];
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export type operations = Record<string, never>;
