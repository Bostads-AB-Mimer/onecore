/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/auth/generatehash": {
    /**
     * Generates a salt and hashes the given password using that salt.
     * @description Generates a salt and hashes the given password using that salt. Pass cleartext password as query parameter.
     */
    get: {
      parameters: {
        query: {
          /** @description The cleartext password that should be hashed */
          password: string;
        };
      };
      responses: {
        /** @description Hashed password and salt */
        200: {
          content: never;
        };
      };
    };
  };
  "/auth/generatetoken": {
    /**
     * Generates a JWT token
     * @description Validates username and password from request body and returns a JWT token.
     */
    post: {
      requestBody: {
        content: {
          "application/x-www-form-urlencoded": {
            username?: string;
            password?: string;
          };
        };
      };
      responses: {
        /** @description A valid JWT token */
        200: {
          content: {
            "application/json": {
              token?: string;
            };
          };
        };
        /** @description Bad request */
        400: {
          content: {
            "application/json": {
              errorMessage?: string;
            };
          };
        };
        /** @description Internal server error */
        500: {
          content: {
            "application/json": {
              message?: string;
            };
          };
        };
      };
    };
  };
  "/auth/login": {
    /**
     * Redirects to Keycloak login
     * @description Redirects the user to the Keycloak login page
     */
    get: {
      responses: {
        /** @description Redirect to Keycloak login */
        302: {
          content: never;
        };
      };
    };
  };
  "/auth/callback": {
    /**
     * OAuth callback endpoint
     * @description Handles the OAuth callback from Keycloak
     */
    post: {
      requestBody: {
        content: {
          "application/json": {
            code?: string;
            redirectUri?: string;
          };
        };
      };
      responses: {
        /** @description User profile information */
        200: {
          content: never;
        };
      };
    };
  };
  "/auth/logout": {
    /**
     * Logout endpoint
     * @description Clears authentication cookies and redirects to Keycloak logout
     */
    get: {
      responses: {
        /** @description Redirect to login page */
        302: {
          content: never;
        };
      };
    };
  };
  "/auth/profile": {
    /**
     * Get user profile
     * @description Returns the authenticated user's profile information
     */
    get: {
      responses: {
        /** @description User profile information */
        200: {
          content: never;
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
      };
    };
  };
  "openapi": {
  };
  "/health": {
    /**
     * Check system health status
     * @description Retrieves the health status of the system and its subsystems.
     */
    get: {
      responses: {
        /** @description Successful response with system health status */
        200: {
          content: {
            "application/json": {
              /**
               * @description Name of the system.
               * @example core
               */
              name?: string;
              /**
               * @description Overall status of the system ('active', 'impaired', 'failure', 'unknown').
               * @example active
               */
              status?: string;
              subsystems?: ({
                  /** @description Name of the subsystem. */
                  name?: string;
                  /**
                   * @description Status of the subsystem.
                   * @enum {string}
                   */
                  status?: "active" | "impaired" | "failure" | "unknown";
                  /** @description Additional details about the subsystem status. */
                  details?: string;
                })[];
            };
          };
        };
      };
    };
  };
  "security": {
  };
  "/leases/by-rental-property-id/{rentalPropertyId}": {
    /**
     * Get leases with related entities for a specific rental property id
     * @description Retrieves lease information along with related entities (such as tenants, properties, etc.) for the specified rental property id.
     */
    get: {
      parameters: {
        query?: {
          /** @description Whether to include upcoming leases in the response */
          includeUpcomingLeases?: boolean;
          /** @description Whether to include terminated leases in the response */
          includeTerminatedLeases?: boolean;
          /** @description Whether to include contact information in the response */
          includeContacts?: boolean;
        };
        path: {
          /** @description Rental roperty id of the building/residence to fetch leases for. */
          rentalPropertyId: string;
        };
      };
      responses: {
        /** @description Successful response with leases and related entities */
        200: {
          content: {
            "application/json": {
              content?: components["schemas"]["Lease"][];
            };
          };
        };
        /** @description Invalid query parameters */
        400: {
          content: {
            "application/json": Record<string, never>;
          };
        };
      };
    };
  };
  "/leases/by-pnr/{pnr}": {
    /**
     * Get leases with related entities for a specific Personal Number (PNR)
     * @description Retrieves lease information along with related entities (such as tenants, properties, etc.) for the specified Personal Number (PNR).
     */
    get: {
      parameters: {
        path: {
          /** @description Personal Number (PNR) of the individual to fetch leases for. */
          pnr: string;
        };
      };
      responses: {
        /** @description Successful response with leases and related entities */
        200: {
          content: {
            "application/json": Record<string, never>[];
          };
        };
      };
    };
  };
  "/leases/by-contact-code/{contactCode}": {
    /**
     * Get leases with related entities for a specific contact code
     * @description Retrieves lease information along with related entities (such as tenants, properties, etc.) for the specified contact code.
     */
    get: {
      parameters: {
        path: {
          /** @description Contact code of the individual to fetch leases for. */
          contactCode: string;
        };
      };
      responses: {
        /** @description Successful response with leases and related entities */
        200: {
          content: {
            "application/json": Record<string, never>[];
          };
        };
      };
    };
  };
  "/consumer-reports/by-pnr/{pnr}": {
    /**
     * Get consumer report for a specific Personal Number (PNR)
     * @description Retrieves credit information and consumer report for the specified Personal Number (PNR).
     */
    get: {
      parameters: {
        path: {
          /** @description Personal Number (PNR) of the individual to fetch credit information for. */
          pnr: string;
        };
      };
      responses: {
        /** @description Successful response with credit information and consumer report */
        200: {
          content: {
            "application/json": Record<string, never>;
          };
        };
      };
    };
  };
  "/contacts/by-pnr/{pnr}": {
    /**
     * Get contact information for a specific Personal Number (PNR)
     * @description Retrieves contact information associated with the specified Personal Number (PNR).
     */
    get: {
      parameters: {
        path: {
          /** @description Personal Number (PNR) of the individual to fetch contact information for. */
          pnr: string;
        };
      };
      responses: {
        /** @description Successful response with contact information */
        200: {
          content: {
            "application/json": Record<string, never>;
          };
        };
      };
    };
  };
  "/contacts/{contactCode}/offers": {
    /**
     * Get offers for a contact
     * @description Retrieves all offers associated with a specific contact based on the provided contact code.
     */
    get: {
      parameters: {
        path: {
          /** @description The unique code identifying the contact. */
          contactCode: string;
        };
      };
      responses: {
        /** @description Successful response with a list of offers for the contact. */
        200: {
          content: {
            "application/json": Record<string, never>;
          };
        };
        /** @description The contact was not found. */
        404: {
          content: never;
        };
        /** @description Internal server error. Failed to retrieve offers. */
        500: {
          content: never;
        };
      };
    };
  };
  "/offers/{offerId}/applicants/{contactCode}": {
    /**
     * Get a specific offer for an applicant
     * @description Retrieve details of a specific offer associated with an applicant using contact code and offer ID.
     */
    get: {
      parameters: {
        path: {
          /** @description The unique ID of the offer. */
          offerId: string;
          /** @description The unique code identifying the applicant. */
          contactCode: string;
        };
      };
      responses: {
        /** @description Details of the specified offer. */
        200: {
          content: {
            "application/json": Record<string, never>;
          };
        };
        /** @description Offer not found for the specified contact code and offer ID. */
        404: {
          content: never;
        };
        /** @description Internal server error. Failed to retrieve the offer. */
        500: {
          content: never;
        };
      };
    };
  };
  "/offers/by-listing-id/{listingId}": {
    /**
     * Get offers for a specific listing
     * @description Get all offers for a listing.
     */
    get: {
      parameters: {
        path: {
          /** @description The unique ID of the listing. */
          listingId: number;
        };
      };
      responses: {
        /** @description A list of offers. */
        200: {
          content: {
            "application/json": Record<string, never>;
          };
        };
        /** @description Internal server error. */
        500: {
          content: never;
        };
      };
    };
  };
  "/offers/by-listing-id/{listingId}/active": {
    /**
     * Gets active offer for a specific listing
     * @description Get an offer for a listing.
     */
    get: {
      parameters: {
        path: {
          /** @description The unique ID of the listing. */
          listingId: number;
        };
      };
      responses: {
        /** @description The active offer. */
        200: {
          content: {
            "application/json": Record<string, never>;
          };
        };
        /** @description Internal server error. */
        500: {
          content: never;
        };
      };
    };
  };
  "/contacts/search": {
    /**
     * Search contacts by PNR or contact code
     * @description Retrieves contacts based on the provided search query.
     */
    get: {
      parameters: {
        query: {
          /** @description The search query to filter contacts. */
          q: string;
        };
      };
      responses: {
        /** @description Successful response with search results */
        200: {
          content: {
            "application/json": Record<string, never>;
          };
        };
        /** @description Bad request. The query parameter 'q' must be a string. */
        400: {
          content: never;
        };
        /** @description Internal server error. Failed to retrieve contacts. */
        500: {
          content: never;
        };
      };
    };
  };
  "/contacts/{contactCode}": {
    /**
     * Get contact by contact code
     * @description Retrieves a contact based on the provided contact code.
     */
    get: {
      parameters: {
        path: {
          /** @description The contact code used to identify the contact. */
          contactCode: string;
        };
      };
      responses: {
        /** @description Successful response with the requested contact */
        200: {
          content: {
            "application/json": Record<string, never>;
          };
        };
      };
    };
  };
  "/tenants/by-contact-code/{contactCode}": {
    /**
     * Get tenant by contact code
     * @description Retrieves a tenant based on the provided contact code.
     */
    get: {
      parameters: {
        path: {
          /** @description The contact code used to identify the contact. */
          contactCode: string;
        };
      };
      responses: {
        /** @description Successfully retrieved tenant information. */
        200: {
          content: {
            "application/json": {
              /** @description The tenant data. */
              data?: Record<string, never>;
            };
          };
        };
        /** @description Not found. */
        404: {
          content: never;
        };
        /** @description Internal server error. Failed to retrieve Tenant information. */
        500: {
          content: never;
        };
      };
    };
  };
  "/contacts/by-phone-number/{pnr}": {
    /**
     * Get contact by phone number
     * @description Retrieves a contact based on the provided phone number.
     */
    get: {
      parameters: {
        path: {
          /** @description The phone number used to identify the contact. */
          pnr: string;
        };
      };
      responses: {
        /** @description Successful response with the requested contact */
        200: {
          content: {
            "application/json": Record<string, never>;
          };
        };
      };
    };
  };
  "/leases/{id}": {
    /**
     * Get lease by ID
     * @description Retrieves lease details along with related entities based on the provided ID.
     */
    get: {
      parameters: {
        path: {
          /** @description The ID of the lease to retrieve. */
          id: string;
        };
      };
      responses: {
        /** @description Successful response with the requested lease and related entities */
        200: {
          content: {
            "application/json": {
              data?: Record<string, never>;
            };
          };
        };
      };
    };
  };
  "/offers/{offerId}/accept": {
    /**
     * Accept an offer
     * @description Accepts an offer for the contact of the contactCode provided
     */
    post: {
      parameters: {
        path: {
          /** @description The ID of the offer to accept */
          offerId: string;
        };
      };
      responses: {
        /** @description Offer accepted successful. */
        202: {
          content: never;
        };
        /** @description Internal server error. Failed to accept the offer. */
        500: {
          content: never;
        };
      };
    };
  };
  "/offers/{offerId}/deny": {
    /**
     * Deny an offer
     * @description Denies an offer
     */
    post: {
      parameters: {
        path: {
          /** @description The ID of the offer to deny */
          offerId: string;
        };
      };
      responses: {
        /** @description Offer denied successful. */
        202: {
          content: never;
        };
        /** @description Internal server error. Failed to deny the offer. */
        500: {
          content: never;
        };
      };
    };
  };
  "/offers/{offerId}/expire": {
    /**
     * Expire an offer
     * @description Expires an offer
     */
    get: {
      parameters: {
        path: {
          /** @description The ID of the offer to expire */
          offerId: string;
        };
      };
      responses: {
        /** @description Offer expired successful. */
        202: {
          content: never;
        };
        /** @description Internal server error. Failed to expire the offer. */
        500: {
          content: never;
        };
      };
    };
  };
  "/applicants": {
    /**
     * Get applicants by contact code
     * @description Retrieves applicants based on the contact code.
     */
    get: {
      parameters: {
        query: {
          /** @description The contact code used to fetch applicants. */
          contactCode: string;
        };
      };
      responses: {
        /** @description Successful retrieval of applicants. */
        200: {
          content: {
            "application/json": Record<string, never>;
          };
        };
      };
    };
  };
  "/applicants/validate-rental-rules/property/{contactCode}/{rentalObjectCode}": {
    /**
     * Validate property rental rules for applicant
     * @description Validate property rental rules for an applicant based on contact code and listing ID.
     */
    get: {
      parameters: {
        path: {
          /** @description The contact code of the applicant. */
          contactCode: string;
          /** @description The xpand rental object code of the property. */
          rentalObjectCode: number;
        };
      };
      responses: {
        /** @description No property rental rules apply to this property. */
        200: {
          content: {
            "application/json": {
              /** @example Additional - applicant is eligible for applying for an additional parking space. Replace - applicant is eligible for replacing their current parking space in the same residential area or property. */
              applicationType?: string;
              /** @example No property rental rules applies to this property. */
              reason?: string;
            };
          };
        };
        /** @description Rental object code is not a parking space. */
        400: {
          content: {
            "application/json": {
              /** @example Rental object code entity is not a parking space. */
              reason?: string;
            };
          };
        };
        /** @description Applicant is not eligible for the property based on property rental rules. */
        403: {
          content: {
            "application/json": {
              reason?: string;
            };
          };
        };
        /** @description Listing, property info, or applicant not found. */
        404: {
          content: {
            "application/json": {
              reason?: string;
            };
          };
        };
        /** @description An error occurred while validating property rental rules. */
        500: {
          content: {
            "application/json": {
              /** @example An error occurred while validating property rental rules. */
              error?: string;
            };
          };
        };
      };
    };
  };
  "/applicants/validate-rental-rules/residential-area/{contactCode}/{districtCode}": {
    /**
     * Validate residential area rental rules for applicant
     * @description Validate residential area rental rules for an applicant based on contact code and district code.
     */
    get: {
      parameters: {
        path: {
          /** @description The contact code of the applicant. */
          contactCode: string;
          /** @description The xpand district code of the residential area to validate against. */
          districtCode: string;
        };
      };
      responses: {
        /** @description Either no residential area rental rules apply or applicant is eligible to apply for parking space. */
        200: {
          content: {
            "application/json": {
              /** @example Additional - applicant is eligible for applying for an additional parking space. Replace - applicant is eligible for replacing their current parking space in the same residential area or property. */
              applicationType?: string;
              reason?: string;
            };
          };
        };
        /** @description Applicant is not eligible for the listing based on residential area rental rules. */
        403: {
          content: {
            "application/json": {
              /** @example Applicant does not have any current or upcoming housing contracts in the residential area. */
              reason?: string;
            };
          };
        };
        /** @description Listing or applicant not found. */
        404: {
          content: {
            "application/json": {
              reason?: string;
            };
          };
        };
        /** @description An error occurred while validating residential area rental rules. */
        500: {
          content: {
            "application/json": {
              /** @example An error occurred while validating residential area rental rules. */
              error?: string;
            };
          };
        };
      };
    };
  };
  "/applicants-with-listings/by-contact-code/{contactCode}": {
    /**
     * Get applicants with listings by contact code
     * @description Retrieves applicants along with their listings based on the contact code.
     */
    get: {
      parameters: {
        path: {
          /** @description The contact code used to fetch applicants and their associated listings. */
          contactCode: string;
        };
      };
      responses: {
        /** @description Successful retrieval of applicants with their listings. */
        200: {
          content: {
            "application/json": Record<string, never>;
          };
        };
      };
    };
  };
  "/applicants/{contactCode}/{listingId}": {
    /**
     * Get applicant by contact code and listing ID
     * @description Retrieves an applicant by their contact code and listing ID.
     */
    get: {
      parameters: {
        path: {
          /** @description The contact code of the applicant. */
          contactCode: string;
          /** @description The ID of the listing associated with the applicant. */
          listingId: string;
        };
      };
      responses: {
        /** @description Successful retrieval of the applicant. */
        200: {
          content: {
            "application/json": Record<string, never>;
          };
        };
      };
    };
  };
  "/applicants/{applicantId}/by-manager": {
    /**
     * Withdraw applicant by manager
     * @description Withdraws an applicant by the manager using the applicant ID.
     */
    delete: {
      parameters: {
        path: {
          /** @description The ID of the applicant to be withdrawn. */
          applicantId: string;
        };
      };
      responses: {
        /** @description Successful withdrawal of the applicant by manager. */
        200: {
          content: {
            "application/json": {
              /** @example Applicant successfully withdrawn by manager. */
              message?: string;
            };
          };
        };
        /** @description Internal server error. Failed to withdraw the applicant. */
        500: {
          content: {
            "application/json": {
              /** @example Error message describing the issue. */
              error?: string;
            };
          };
        };
      };
    };
  };
  "/applicants/{applicantId}/by-user/{contactCode}": {
    /**
     * Withdraw applicant by user
     * @description Withdraws an applicant by the user identified by contact code and applicant ID.
     */
    delete: {
      parameters: {
        path: {
          /** @description The ID of the applicant to be withdrawn. */
          applicantId: string;
          /** @description The contact code of the user initiating the withdrawal. */
          contactCode: string;
        };
      };
      responses: {
        /** @description Successful withdrawal of the applicant by user. */
        200: {
          content: {
            "application/json": {
              /** @example Applicant successfully withdrawn by user. */
              message?: string;
            };
          };
        };
        /** @description Internal server error. Failed to withdraw the applicant. */
        500: {
          content: {
            "application/json": {
              /** @example Error message describing the issue. */
              error?: string;
            };
          };
        };
      };
    };
  };
  "/contacts/{contactCode}/application-profile": {
    /**
     * Gets an application profile by contact code
     * @description Retrieve application profile information by contact code.
     */
    get: {
      parameters: {
        path: {
          /** @description The contact code associated with the application profile. */
          contactCode: string;
        };
      };
      responses: {
        /** @description Successfully retrieved application profile. */
        200: {
          content: {
            "application/json": {
              /** @description The application profile data. */
              data?: Record<string, never>;
            };
          };
        };
        /** @description Not found. */
        404: {
          content: never;
        };
        /** @description Internal server error. Failed to retrieve application profile information. */
        500: {
          content: never;
        };
      };
    };
  };
  "/contacts/{contactCode}/application-profile/admin": {
    /**
     * Creates or updates an application profile by contact code
     * @description Create or update application profile information by contact code.
     */
    post: {
      parameters: {
        path: {
          /** @description The contact code associated with the application profile. */
          contactCode: string;
        };
      };
      requestBody: {
        content: {
          "application/json": Record<string, never>;
        };
      };
      responses: {
        /** @description Successfully updated application profile. */
        200: {
          content: {
            "application/json": {
              /** @description The application profile data. */
              data?: Record<string, never>;
            };
          };
        };
        /** @description Successfully created application profile. */
        201: {
          content: {
            "application/json": {
              /** @description The application profile data. */
              data?: Record<string, never>;
            };
          };
        };
        /** @description Internal server error. Failed to update application profile information. */
        500: {
          content: never;
        };
      };
    };
  };
  "/contacts/{contactCode}/application-profile/client": {
    /**
     * Creates or updates an application profile by contact code
     * @description Create or update application profile information by contact code.
     */
    post: {
      parameters: {
        path: {
          /** @description The contact code associated with the application profile. */
          contactCode: string;
        };
      };
      requestBody: {
        content: {
          "application/json": Record<string, never>;
        };
      };
      responses: {
        /** @description Successfully updated application profile. */
        200: {
          content: {
            "application/json": {
              /** @description The application profile data. */
              data?: Record<string, never>;
            };
          };
        };
        /** @description Successfully created application profile. */
        201: {
          content: {
            "application/json": {
              /** @description The application profile data. */
              data?: Record<string, never>;
            };
          };
        };
        /** @description Internal server error. Failed to update application profile information. */
        500: {
          content: never;
        };
      };
    };
  };
  "/contacts/{contactCode}/{rentalObjectCode}/verify-application": {
    /**
     * Validate max num residents.
     * @description Checks if application is allowed based on current number of residents.
     */
    get: {
      parameters: {
        path: {
          /** @description The contact code associated with the application profile. */
          contactCode: string;
          /** @description The rental object code associated with the rental property. */
          rentalObjectCode: string;
        };
      };
      responses: {
        /** @description Application allowed. */
        200: {
          content: never;
        };
        /** @description Application not allowed. */
        403: {
          content: never;
        };
        /** @description Not found. */
        404: {
          content: never;
        };
        /** @description Internal server error. Failed to retrieve application profile information. */
        500: {
          content: never;
        };
      };
    };
  };
  "/listings": {
    /**
     * Get listings
     * @description Retrieves a list of listings.
     */
    get: {
      parameters: {
        query?: {
          /** @description The listing category, either PARKING_SPACE, APARTMENT or STORAGE. */
          listingCategory?: string;
          /** @description true for published listings, false for unpublished listings. */
          published?: boolean;
          /** @description The rental rule for the listings, either SCORED or NON_SCORED. */
          rentalRule?: string;
          /** @description A contact code to filter out listings that are not valid to rent for the contact. */
          validToRentForContactCode?: string;
        };
      };
      responses: {
        /** @description Successful response with the requested list of listings. */
        200: {
          content: {
            "application/json": Record<string, never>;
          };
        };
      };
    };
  };
  "/listings/{listingId}": {
    /**
     * Delete a Listing by ID
     * @description Deletes a listing by it's ID.
     */
    delete: {
      parameters: {
        path: {
          /** @description ID of the listing to delete. */
          listingId: number;
        };
      };
      responses: {
        /** @description Successfully deleted listing. */
        200: {
          content: never;
        };
        /** @description Conflict. */
        409: {
          content: never;
        };
        /** @description Internal server error. */
        500: {
          content: {
            "application/json": {
              /** @description The error message. */
              error?: string;
            };
          };
        };
      };
    };
  };
  "/listings/{listingId}/status": {
    /**
     * Update a listings status by ID
     * @description Updates a listing status by it's ID.
     */
    put: {
      parameters: {
        path: {
          /** @description ID of the listing to delete. */
          listingId: number;
        };
      };
      requestBody: {
        content: {
          "application/json": Record<string, never>;
        };
      };
      responses: {
        /** @description Successfully updated listing. */
        200: {
          content: never;
        };
        /** @description Listing not found. */
        404: {
          content: never;
        };
        /** @description Internal server error. */
        500: {
          content: {
            "application/json": {
              /** @description The error message. */
              error?: string;
            };
          };
        };
      };
    };
  };
  "/listings/sync-internal-from-xpand": {
    /**
     * Sync internal parking spaces from xpand to onecores database
     * @description null
     */
    post: {
      responses: {
        /** @description Request ok. */
        200: {
          content: never;
        };
        /** @description Internal server error. Failed to sync internal parking spaces. */
        500: {
          content: never;
        };
      };
    };
  };
  "/listings/{listingId}/offers": {
    /**
     * Create an offer for a listing
     * @description Creates an offer for the specified listing.
     */
    post: {
      parameters: {
        path: {
          /** @description The ID of the listing to create an offer for. */
          listingId: string;
        };
      };
      responses: {
        /** @description Offer creation successful. */
        201: {
          content: never;
        };
        /** @description Internal server error. Failed to create the offer. */
        500: {
          content: never;
        };
      };
    };
  };
  "/listings/{listingId}/applicants/details": {
    /**
     * Get listing by ID with detailed applicants
     * @description Retrieves a listing by ID along with detailed information about its applicants.
     */
    get: {
      parameters: {
        path: {
          /** @description The ID of the listing to fetch along with detailed applicant information. */
          listingId: string;
        };
      };
      responses: {
        /** @description Successful retrieval of the listing with detailed applicant information. */
        200: {
          content: {
            "application/json": Record<string, never>;
          };
        };
      };
    };
  };
  "/listings/{id}": {
    /**
     * Get listing by ID
     * @description Retrieves details of a listing based on the provided ID.
     */
    get: {
      parameters: {
        path: {
          /** @description The ID of the listing to retrieve. */
          id: string;
        };
      };
      responses: {
        /** @description Successful response with the requested listing details. */
        200: {
          content: {
            "application/json": Record<string, never>;
          };
        };
      };
    };
  };
  "/listings-with-applicants": {
    /**
     * Get listings with applicants
     * @description Retrieves a list of listings along with their associated applicants.
     */
    get: {
      parameters: {
        query?: {
          /** @description Filters listings by one of the above types. Must be one of the specified values. */
          type?: "published" | "ready-for-offer" | "offered" | "historical";
        };
      };
      responses: {
        /** @description Successful response with listings and their applicants. */
        200: {
          content: {
            "application/json": Record<string, never>[];
          };
        };
        /** @description Internal server error. Failed to retrieve listings with applicants. */
        500: {
          content: never;
        };
      };
    };
  };
  "/vacant-parkingspaces": {
    /**
     * Get all vacant parking spaces
     * @description Retrieves a list of all vacant parking spaces.
     */
    get: {
      responses: {
        /** @description A list of vacant parking spaces. */
        200: {
          content: {
            "application/json": {
              content?: {
                  rentalObjectCode?: string;
                  address?: string;
                  monthlyRent?: number;
                  propertyCaption?: string;
                  propertyCode?: string;
                  residentialAreaCode?: string;
                  residentialAreaCaption?: string;
                  objectTypeCaption?: string;
                  objectTypeCode?: string;
                  /** Format: date-time */
                  vacantFrom?: string;
                  districtCaption?: string;
                  districtCode?: string;
                  braArea?: number;
                }[];
            };
          };
        };
        /** @description Internal server error. Failed to retrieve vacant parking spaces. */
        500: {
          content: {
            "application/json": {
              /** @description Error message. */
              error?: string;
            };
          };
        };
      };
    };
  };
  "/rental-objects/by-code/{rentalObjectCode}": {
    /**
     * Get a rental object by code
     * @description Fetches a rental object by Rental Object Code.
     */
    get: {
      parameters: {
        path: {
          /** @description The code of the rental object to fetch. */
          rentalObjectCode: string;
        };
      };
      responses: {
        /** @description Successfully retrieved the rental object. */
        200: {
          content: {
            "application/json": {
              content?: {
                  rentalObjectCode?: string;
                  address?: string;
                  monthlyRent?: number;
                  propertyCaption?: string;
                  propertyCode?: string;
                  residentialAreaCode?: string;
                  residentialAreaCaption?: string;
                  objectTypeCaption?: string;
                  objectTypeCode?: string;
                  /** Format: date-time */
                  vacantFrom?: string;
                  districtCaption?: string;
                  districtCode?: string;
                  braArea?: number;
                }[];
            };
          };
        };
        /** @description Internal server error. Failed to fetch rental object. */
        500: {
          content: {
            "application/json": {
              /** @description The error message. */
              error?: string;
            };
          };
        };
      };
    };
  };
  "/rental-properties/{id}/floorplan": {
    /**
     * Get floor plan for a rental property
     * @description Returns the floor plan image for the specified rental property.
     */
    get: {
      parameters: {
        path: {
          /** @description The ID of the rental property. */
          id: string;
        };
      };
      responses: {
        /** @description Successfully retrieved floor plan image */
        200: {
          content: {
            "image/jpeg": string;
          };
        };
      };
    };
  };
  "/rental-properties/{id}/material-options": {
    /** Get room types with material options by rental property ID */
    get: {
      parameters: {
        path: {
          /** @description ID of the rental property to fetch room types for */
          id: string;
        };
      };
      responses: {
        /** @description Successful response with room types and their material options */
        200: {
          content: {
            "application/json": Record<string, never>;
          };
        };
      };
    };
  };
  "/rental-properties/{id}/material-options/{materialOptionId}": {
    /** Get material option by ID for a specific rental property */
    get: {
      parameters: {
        path: {
          /** @description ID of the rental property to fetch material options from */
          id: string;
          /** @description ID of the material option to fetch */
          materialOptionId: string;
        };
      };
      responses: {
        /** @description Successful response with the requested material option */
        200: {
          content: {
            "application/json": Record<string, never>;
          };
        };
      };
    };
  };
  "/rental-properties/{apartmentId}/contracts/{contractId}/material-choices": {
    /** Get material choices for a specific apartment and contract */
    get: {
      parameters: {
        path: {
          /** @description ID of the apartment to fetch material choices for */
          apartmentId: string;
          /** @description ID of the contract to fetch material choices for */
          contractId: string;
        };
      };
      responses: {
        /** @description Successful response with the requested material choices */
        200: {
          content: {
            "application/json": Record<string, never>;
          };
        };
      };
    };
  };
  "/rental-properties/{id}/rooms-with-material-choices": {
    /** Get rooms with material choices for a specific rental property */
    get: {
      parameters: {
        path: {
          /** @description ID of the rental property to fetch rooms with material choices for */
          id: string;
        };
      };
      responses: {
        /** @description Successful response with the requested rooms and their material choices */
        200: {
          content: {
            "application/json": Record<string, never>;
          };
        };
      };
    };
  };
  "/rental-properties/{id}/material-choices": {
    /**
     * Get material choices for a specific rental property
     * @description Retrieve material choices associated with a rental property identified by {id}.
     */
    get: {
      parameters: {
        path: {
          /** @description ID of the rental property to fetch material choices for. */
          id: string;
        };
      };
      responses: {
        /** @description Successful response with the requested material choices */
        200: {
          content: {
            "application/json": Record<string, never>;
          };
        };
      };
    };
    /**
     * Save material choices for a rental property
     * @description Saves material choices for a specific rental property.
     */
    post: {
      parameters: {
        path: {
          /** @description ID of the rental property to save material choices for. */
          id: string;
        };
      };
      requestBody: {
        content: {
          "application/json": Record<string, never>;
        };
      };
      responses: {
        /** @description Material choices successfully saved */
        200: {
          content: {
            "application/json": Record<string, never>;
          };
        };
      };
    };
  };
  "/material-choice-statuses": {
    /**
     * Get material choice statuses for rental properties
     * @description Retrieves statuses of material choices associated with rental properties. Optionally includes rental property details if specified in query parameter.
     */
    get: {
      parameters: {
        query?: {
          /** @description Optional parameter to include rental property details in response. */
          includeRentalProperties?: "true";
        };
      };
      responses: {
        /** @description Successful response with material choice statuses */
        200: {
          content: {
            "application/json": unknown[];
          };
        };
      };
    };
  };
  "/rental-properties/{id}": {
    /**
     * Get rental property by ID
     * @description Retrieves details of a rental property based on the provided ID.
     */
    get: {
      parameters: {
        path: {
          /** @description ID of the rental property to fetch. */
          id: string;
        };
      };
      responses: {
        /** @description Successful response with rental property details */
        200: {
          content: {
            "application/json": {
              data?: Record<string, never>;
            };
          };
        };
      };
    };
  };
  "/parking-spaces/{parkingSpaceId}/leases": {
    /**
     * Create lease for an external parking space
     * @description Creates a new lease for the specified external parking space.
     */
    post: {
      parameters: {
        path: {
          /** @description ID of the parking space for which the lease is being created. */
          parkingSpaceId: string;
        };
      };
      responses: {
        /** @description Lease successfully created */
        201: {
          content: {
            "application/json": Record<string, never>;
          };
        };
        /** @description Bad request */
        400: {
          content: {
            "application/json": {
              /** @example Parking space id is missing. It needs to be passed in the url. */
              message?: string;
            };
          };
        };
        /** @description Internal server error */
        500: {
          content: {
            "application/json": {
              /** @example A technical error has occured. */
              message?: string;
            };
          };
        };
      };
    };
  };
  "/parking-spaces/{parkingSpaceId}/note-of-interests": {
    /**
     * Create a note of interest for an internal parking space
     * @description Creates a new note of interest for the specified internal parking space.
     */
    post: {
      parameters: {
        path: {
          /** @description ID of the parking space for which the note of interest is being created. */
          parkingSpaceId: string;
        };
      };
      responses: {
        /** @description Note of interest successfully created */
        201: {
          content: {
            "application/json": Record<string, never>;
          };
        };
        /** @description Bad request */
        400: {
          content: {
            "application/json": {
              /** @example Contact code is missing. It needs to be passed in the body (contactCode) */
              message?: string;
            };
          };
        };
        /** @description Internal server error */
        500: {
          content: {
            "application/json": {
              /** @example A technical error has occured. */
              message?: string;
            };
          };
        };
      };
    };
  };
  "/rental-properties/by-rental-object-code/{rentalObjectCode}": {
    /**
     * Get rental property information from Xpand
     * @description Retrieves detailed information about a rental property from Xpand based on the provided rental object code.
     */
    get: {
      parameters: {
        path: {
          /** @description Rental object code used to identify the specific rental property in Xpand. */
          rentalObjectCode: string;
        };
      };
      responses: {
        /** @description Successfully retrieved rental property information */
        200: {
          content: {
            "application/json": Record<string, never>;
          };
        };
      };
    };
  };
  "/maintenance-units/by-rental-property-id/{rentalPropertyId}/{type}": {
    /**
     * Get maintenance units for a rental property
     * @description Retrieves maintenance units for a specific rental property, optionally filtered by type.
     */
    get: {
      parameters: {
        path: {
          /** @description ID of the rental property to fetch maintenance units for. */
          rentalPropertyId: string;
          /** @description Optional type filter for maintenance units. */
          type: string;
        };
      };
      responses: {
        /** @description Successful response with maintenance units */
        200: {
          content: {
            "application/json": unknown[];
          };
        };
      };
    };
  };
  "/maintenance-units/by-contact-code/{contactCode}": {
    /**
     * Get maintenance units by contact code.
     * @description Returns all maintenance units belonging to a contact code.
     */
    get: {
      parameters: {
        path: {
          /** @description The contact code for which to retrieve maintenance units. */
          contactCode: string;
        };
      };
      responses: {
        /** @description Successfully retrieved the maintenance units. */
        200: {
          content: {
            "application/json": {
              content?: {
                  ok?: boolean;
                  data?: components["schemas"]["MaintenanceUnit"][];
                }[];
            };
          };
        };
        /** @description Invalid query parameters. */
        400: {
          content: never;
        };
        /** @description Internal server error. */
        500: {
          content: never;
        };
      };
    };
  };
  "/work-orders/data/{identifier}": {
    /**
     * Get work order data by different identifiers
     * @description Retrieves work order data along with associated leases based on the provided identifier type.
     */
    get: {
      parameters: {
        query: {
          /** @description The type of the identifier used to fetch work order data. */
          handler: "rentalObjectId" | "leaseId" | "pnr" | "phoneNumber" | "contactCode";
        };
        path: {
          /** @description The identifier value for fetching work order data. */
          identifier: string;
        };
      };
      responses: {
        /** @description Successfully retrieved work order data. */
        200: {
          content: {
            "application/json": {
              content?: {
                  rentalPropertyId?: string;
                  leases?: {
                      leaseId?: string;
                      rentalPropertyId?: string;
                    }[];
                }[];
            };
          };
        };
        /** @description Invalid handler */
        400: {
          content: {
            "application/json": {
              /** @example Invalid handler */
              error?: string;
            };
          };
        };
        /** @description Internal server error. Failed to retrieve work order data. */
        500: {
          content: {
            "application/json": {
              /** @example Internal server error */
              error?: string;
            };
          };
        };
      };
    };
  };
  "/work-orders/by-contact-code/{contactCode}": {
    /**
     * Get work orders by contact code
     * @description Retrieves work orders based on the provided contact code.
     */
    get: {
      parameters: {
        path: {
          /** @description The contact code used to fetch work orders. */
          contactCode: string;
        };
      };
      responses: {
        /** @description Successfully retrieved work orders. */
        200: {
          content: {
            "application/json": {
              content?: {
                totalCount?: number;
                workOrders?: components["schemas"]["WorkOrder"][];
              };
            };
          };
        };
        /** @description Internal server error. Failed to retrieve work orders. */
        500: {
          content: {
            "application/json": {
              /** @example Internal server error */
              error?: string;
            };
          };
        };
      };
    };
  };
  "/work-orders/by-rental-property-id/{rentalPropertyId}": {
    /**
     * Get work orders by rental property id
     * @description Retrieves work orders based on the provided rental property id.
     */
    get: {
      parameters: {
        path: {
          /** @description The rental property id used to fetch work orders. */
          rentalPropertyId: string;
        };
      };
      responses: {
        /** @description Successfully retrieved work orders. */
        200: {
          content: {
            "application/json": {
              content?: {
                totalCount?: number;
                workOrders?: components["schemas"]["WorkOrder"][];
              };
            };
          };
        };
        /** @description Internal server error. Failed to retrieve work orders. */
        500: {
          content: {
            "application/json": {
              /** @example Internal server error */
              error?: string;
            };
          };
        };
      };
    };
  };
  "/work-orders/xpand/by-rental-property-id/{rentalPropertyId}": {
    /**
     * Get work orders by rental property id from xpand
     * @description Retrieves work orders based on the provided rental property id.
     */
    get: {
      parameters: {
        path: {
          /** @description The rental property id used to fetch work orders. */
          rentalPropertyId: string;
        };
      };
      responses: {
        /** @description Successfully retrieved work orders. */
        200: {
          content: {
            "application/json": {
              content?: {
                totalCount?: number;
                workOrders?: components["schemas"]["XpandWorkOrder"][];
              };
            };
          };
        };
        /** @description Internal server error. Failed to retrieve work orders. */
        500: {
          content: {
            "application/json": {
              /** @example Internal server error */
              error?: string;
            };
          };
        };
      };
    };
  };
  "/work-orders/xpand/{code}": {
    /**
     * Get work order details by rental property id from xpand
     * @description Retrieves work order details.
     */
    get: {
      parameters: {
        path: {
          /** @description The work order code to fetch details for. */
          code: string;
        };
      };
      responses: {
        /** @description Successfully retrieved work order. */
        200: {
          content: {
            "application/json": {
              content?: components["schemas"]["XpandWorkOrder"];
            };
          };
        };
        /** @description Work order not found. */
        404: {
          content: {
            "application/json": {
              /** @example Work order not found */
              error?: string;
            };
          };
        };
        /** @description Internal server error. Failed to retrieve work order. */
        500: {
          content: {
            "application/json": {
              /** @example Internal server error */
              error?: string;
            };
          };
        };
      };
    };
  };
  "/work-orders": {
    /**
     * Create a new work order
     * @description Creates a new work order.
     */
    post: {
      requestBody: {
        content: {
          "application/json": {
            /** @description The contact code of the tenant. */
            ContactCode?: string;
            /** @description The rental property ID. */
            RentalObjectCode?: string;
            Rows?: {
                /** @description The location code of the work order. */
                LocationCode?: string;
              }[];
            /** @description Access options for the work order. */
            AccessOptions?: Record<string, never>;
            /** @description Pet information for the work order. */
            Pet?: Record<string, never>;
            Images?: string[];
          };
        };
      };
      responses: {
        /** @description Successfully created the work order. */
        200: {
          content: {
            "application/json": {
              /** @example Work order created */
              message?: string;
            };
          };
        };
        /** @description Bad request. Missing or invalid parameters. */
        400: {
          content: {
            "application/json": {
              /** @example ContactCode is missing */
              reason?: string;
            };
          };
        };
        /** @description Not found. Rental property or active lease not found. */
        404: {
          content: {
            "application/json": {
              /** @example Rental property not found */
              reason?: string;
            };
          };
        };
        /** @description Internal server error. Failed to create the work order. */
        500: {
          content: {
            "application/json": {
              /** @example Failed to create a new work order */
              error?: string;
            };
          };
        };
      };
    };
  };
  "/work-orders/{workOrderId}/update": {
    /**
     * Update a work order with a message
     * @description Adds a message to the specified work order.
     */
    post: {
      parameters: {
        path: {
          /** @description The ID of the work order to be updated. */
          workOrderId: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            /** @description The message to be added to the work order. */
            message?: string;
          };
        };
      };
      responses: {
        /** @description Successfully added the message to the work order. */
        200: {
          content: {
            "application/json": {
              /** @example Message added to work order with ID {workOrderId} */
              message?: string;
            };
          };
        };
        /** @description Bad request. Missing or invalid parameters. */
        400: {
          content: {
            "application/json": {
              /** @example Message is missing from the request body */
              reason?: string;
            };
          };
        };
        /** @description Internal server error. Failed to add the message to the work order. */
        500: {
          content: {
            "application/json": {
              /** @example Failed to add message to work order with ID {workOrderId} */
              message?: string;
            };
          };
        };
      };
    };
  };
  "/work-orders/{workOrderId}/close": {
    /**
     * Close a work order
     * @description Closes a work order based on the provided work order ID.
     */
    post: {
      parameters: {
        path: {
          /** @description The ID of the work order to be closed. */
          workOrderId: string;
        };
      };
      responses: {
        /** @description Successfully closed the work order. */
        200: {
          content: {
            "application/json": {
              /** @example Work order with ID {workOrderId} updated successfully */
              message?: string;
            };
          };
        };
        /** @description Internal server error. Failed to close the work order. */
        500: {
          content: {
            "application/json": {
              /** @example Failed to update work order with ID {workOrderId} */
              message?: string;
            };
          };
        };
      };
    };
  };
  "/work-orders/send-sms": {
    /**
     * Send SMS for a work order
     * @description Sends an SMS message to the specified phone number for a work order.
     */
    post: {
      requestBody: {
        content: {
          "application/json": {
            /** @description The phone number to send the SMS to. */
            phoneNumber?: string;
            /** @description The message to be sent via SMS. */
            text?: string;
          };
        };
      };
      responses: {
        /** @description Successfully sent the SMS. */
        200: {
          content: {
            "application/json": {
              /** @example Sms sent to {phoneNumber} */
              message?: string;
            };
          };
        };
        /** @description Bad request. Missing or invalid parameters. */
        400: {
          content: {
            "application/json": {
              /** @example Bad request: phoneNumber and message are required */
              reason?: string;
            };
          };
        };
        /** @description Internal server error. Failed to send the SMS. */
        500: {
          content: {
            "application/json": {
              /** @example Unexpected error sending sms to {phoneNumber} */
              message?: string;
            };
          };
        };
      };
    };
  };
  "/work-orders/send-email": {
    /**
     * Send email for a work order
     * @description Sends an email to the specified recipient for a work order.
     */
    post: {
      requestBody: {
        content: {
          "application/json": {
            /** @description The email address of the recipient. */
            to?: string;
            /** @description The subject of the email. */
            subject?: string;
            /** @description The message to be sent in the email. */
            message?: string;
          };
        };
      };
      responses: {
        /** @description Successfully sent the email. */
        200: {
          content: {
            "application/json": {
              /** @example Email sent to {to} */
              message?: string;
            };
          };
        };
        /** @description Bad request. Missing or invalid parameters. */
        400: {
          content: {
            "application/json": {
              /** @example Bad request: to, subject, and message are required */
              reason?: string;
            };
          };
        };
        /** @description Internal server error. Failed to send the email. */
        500: {
          content: {
            "application/json": {
              /** @example Failed to send email to {to}, status: {statusCode} */
              text?: string;
            };
          };
        };
      };
    };
  };
  "/buildings/by-building-code/{buildingCode}": {
    /**
     * Get building by building code
     * @description Retrieves building data by building code
     */
    get: {
      parameters: {
        path: {
          /** @description The code of the building */
          buildingCode: string;
        };
      };
      responses: {
        /** @description Successfully retrieved building */
        200: {
          content: {
            "application/json": {
              content?: components["schemas"]["Building"];
            };
          };
        };
        /** @description Building not found */
        404: {
          content: {
            "application/json": {
              /** @example Building not found */
              error?: string;
            };
          };
        };
        /** @description Internal server error */
        500: {
          content: {
            "application/json": {
              /** @example Internal server error */
              error?: string;
            };
          };
        };
      };
    };
  };
  "/companies": {
    /**
     * Get all companies
     * @description Retrieves companies from property base
     */
    get: {
      responses: {
        /** @description Successfully retrieved companies */
        200: {
          content: {
            "application/json": {
              content?: components["schemas"]["Company"][];
            };
          };
        };
        /** @description Internal server error */
        500: {
          content: {
            "application/json": {
              /** @example Internal server error */
              error?: string;
            };
          };
        };
      };
    };
  };
  "/residences": {
    /**
     * Get residences by building code and (optional) staircase code
     * @description Retrieves residences by building code and (optional) staircase code
     */
    get: {
      parameters: {
        query: {
          /** @description Code for the building to fetch residences from */
          buildingCode: string;
          /** @description Code for the staircase to fetch residences from */
          staircaseCode?: string;
        };
      };
      responses: {
        /** @description Successfully retrieved residences */
        200: {
          content: {
            "application/json": {
              content?: components["schemas"]["Residence"][];
            };
          };
        };
        /** @description Missing building code or invalid query parameters */
        400: {
          content: {
            "application/json": {
              error?: Record<string, never>;
            };
          };
        };
        /** @description Internal server error */
        500: {
          content: {
            "application/json": {
              /** @example Internal server error */
              error?: string;
            };
          };
        };
      };
    };
  };
  "/properties": {
    /**
     * Get properties by company code and (optional) tract
     * @description Retrieves properties by company code and (optional) tract
     */
    get: {
      parameters: {
        query: {
          /** @description The code of the company that owns the properties. */
          companyCode: string;
          /** @description Optional filter to get properties in a specific tract. */
          tract?: string;
        };
      };
      responses: {
        /** @description Successfully retrieved properties */
        200: {
          content: {
            "application/json": {
              content?: components["schemas"]["Property"][];
            };
          };
        };
        /** @description Missing company code or invalid query parameters */
        400: {
          content: {
            "application/json": {
              error?: Record<string, never>;
            };
          };
        };
        /** @description Internal server error */
        500: {
          content: {
            "application/json": {
              /** @example Internal server error */
              error?: string;
            };
          };
        };
      };
    };
  };
  "/properties/search": {
    /**
     * Search properties
     * @description Retrieves a list of all real estate properties by name.
     */
    get: {
      parameters: {
        query?: {
          /** @description The search query. */
          q?: string;
        };
      };
      responses: {
        /** @description Successfully retrieved list of properties. */
        200: {
          content: {
            "application/json": {
              content?: components["schemas"]["Property"][];
            };
          };
        };
        /** @description Invalid query parameters. */
        400: {
          content: never;
        };
        /** @description Internal server error. */
        500: {
          content: never;
        };
      };
    };
  };
  "/properties/{propertyId}": {
    /**
     * Get property by property id
     * @description Retrieves property by property id
     */
    get: {
      parameters: {
        path: {
          /** @description The id of the property */
          propertyId: string;
        };
      };
      responses: {
        /** @description Successfully retrieved property */
        200: {
          content: {
            "application/json": {
              content?: components["schemas"]["Property"];
            };
          };
        };
        /** @description Property not found */
        404: {
          content: {
            "application/json": {
              /** @example Property not found */
              error?: string;
            };
          };
        };
        /** @description Internal server error */
        500: {
          content: {
            "application/json": {
              /** @example Internal server error */
              error?: string;
            };
          };
        };
      };
    };
  };
  "/residences/by-rental-id/{rentalId}": {
    /**
     * Get residence data by residence rental id
     * @description Retrieves residence data by residence rental id
     */
    get: {
      parameters: {
        path: {
          /** @description Rental id for the residence to fetch */
          rentalId: string;
        };
      };
      responses: {
        /** @description Successfully retrieved residence. */
        200: {
          content: {
            "application/json": {
              content?: components["schemas"]["ResidenceByRentalIdDetails"];
            };
          };
        };
        /** @description Residence not found */
        404: {
          content: {
            "application/json": {
              /** @example Residence not found */
              error?: string;
            };
          };
        };
        /** @description Internal server error. Failed to retrieve residence data. */
        500: {
          content: {
            "application/json": {
              /** @example Internal server error */
              error?: string;
            };
          };
        };
      };
    };
  };
  "/residences/{residenceId}": {
    /**
     * Get residence data by residenceId
     * @description Retrieves residence data by residenceId
     */
    get: {
      parameters: {
        path: {
          /** @description Id for the residence to fetch */
          residenceId: string;
        };
      };
      responses: {
        /** @description Successfully retrieved residence. */
        200: {
          content: {
            "application/json": {
              content?: components["schemas"]["ResidenceDetails"];
            };
          };
        };
        /** @description Residence not found */
        404: {
          content: {
            "application/json": {
              /** @example Residence not found */
              error?: string;
            };
          };
        };
        /** @description Internal server error. Failed to retrieve residence data. */
        500: {
          content: {
            "application/json": {
              /** @example Internal server error */
              error?: string;
            };
          };
        };
      };
    };
  };
  "/staircases": {
    /**
     * Get staircases for a building
     * @description Retrieves staircases for a building
     */
    get: {
      parameters: {
        query: {
          /** @description Code for the building to fetch staircases for */
          buildingCode: string;
        };
      };
      responses: {
        /** @description Successfully retrieved staircases. */
        200: {
          content: {
            "application/json": {
              content?: components["schemas"]["Staircase"][];
            };
          };
        };
        /** @description Missing buildingCode */
        400: {
          content: {
            "application/json": {
              /** @example Missing buildingCode */
              error?: string;
            };
          };
        };
        /** @description Internal server error */
        500: {
          content: {
            "application/json": {
              /** @example Internal server error */
              error?: string;
            };
          };
        };
      };
    };
  };
  "/rooms": {
    /**
     * Get rooms by residence id.
     * @description Returns all rooms belonging to a residence.
     */
    get: {
      parameters: {
        query: {
          /** @description The id of the residence. */
          residenceId: string;
        };
      };
      responses: {
        /** @description Successfully retrieved the rooms. */
        200: {
          content: {
            "application/json": {
              content?: components["schemas"]["Room"][];
            };
          };
        };
        /** @description Invalid query parameters. */
        400: {
          content: never;
        };
        /** @description Internal server error. */
        500: {
          content: never;
        };
      };
    };
  };
  "/parking-spaces/by-rental-id/{rentalId}": {
    /**
     * Get parking space data by rentalId
     * @description Retrieves parking space data by rentalId
     */
    get: {
      parameters: {
        path: {
          /** @description Rental id to fetch parking space for */
          rentalId: string;
        };
      };
      responses: {
        /** @description Successfully retrieved parking space. */
        200: {
          content: {
            "application/json": {
              content?: components["schemas"]["ParkingSpace"];
            };
          };
        };
        /** @description Parking space not found */
        404: {
          content: {
            "application/json": {
              /** @example Parking space not found */
              error?: string;
            };
          };
        };
        /** @description Internal server error. Failed to retrieve parking space data. */
        500: {
          content: {
            "application/json": {
              /** @example Internal server error */
              error?: string;
            };
          };
        };
      };
    };
  };
  "/maintenance-units/by-rental-id/{rentalId}": {
    /**
     * Get maintenance units by rental id.
     * @description Returns all maintenance units belonging to a rental property.
     */
    get: {
      parameters: {
        path: {
          /** @description The ID of the rental property for which to retrieve maintenance units. */
          rentalId: string;
        };
      };
      responses: {
        /** @description Successfully retrieved the maintenance units. */
        200: {
          content: {
            "application/json": {
              content?: components["schemas"]["MaintenanceUnit"][];
            };
          };
        };
        /** @description Invalid query parameters. */
        400: {
          content: never;
        };
        /** @description Internal server error. */
        500: {
          content: never;
        };
      };
    };
  };
  "/maintenance-units/by-building-code/{buildingCode}": {
    /**
     * Get maintenance units by building code.
     * @description Returns all maintenance units belonging to a building.
     */
    get: {
      parameters: {
        path: {
          /** @description The code of the building for which to retrieve maintenance units. */
          buildingCode: string;
        };
      };
      responses: {
        /** @description Successfully retrieved the maintenance units. */
        200: {
          content: {
            "application/json": {
              content?: components["schemas"]["MaintenanceUnit"][];
            };
          };
        };
        /** @description Invalid query parameters. */
        400: {
          content: never;
        };
        /** @description Internal server error. */
        500: {
          content: never;
        };
      };
    };
  };
  "/facilities/by-rental-id/{rentalId}": {
    /**
     * Get facility by rental id.
     * @description Returns facility.
     */
    get: {
      parameters: {
        path: {
          /** @description The rental id of the facility. */
          rentalId: string;
        };
      };
      responses: {
        /** @description Successfully retrieved the facility. */
        200: {
          content: {
            "application/json": {
              content?: components["schemas"]["FacilityDetails"];
            };
          };
        };
        /** @description Not found. */
        404: {
          content: never;
        };
        /** @description Internal server error. */
        500: {
          content: never;
        };
      };
    };
  };
  "/maintenance-units/by-property-code/{code}": {
    /**
     * Get maintenance units by property code.
     * @description Returns all maintenance units belonging to a property.
     */
    get: {
      parameters: {
        path: {
          /** @description The code of the property for which to retrieve maintenance units. */
          code: string;
        };
      };
      responses: {
        /** @description Successfully retrieved the maintenance units. */
        200: {
          content: {
            "application/json": {
              content?: components["schemas"]["MaintenanceUnit"][];
            };
          };
        };
        /** @description Invalid query parameters. */
        400: {
          content: never;
        };
        /** @description Internal server error. */
        500: {
          content: never;
        };
      };
    };
  };
  "/search": {
    /**
     * Omni-search for different entities
     * @description Search for properties, buildings, and residences.
     */
    get: {
      parameters: {
        query: {
          /** @description The search query string. Matches on property name, building name or residence rental object id */
          q: string;
        };
      };
      responses: {
        /** @description A list of search results */
        200: {
          content: {
            "application/json": {
              content?: components["schemas"]["SearchResult"][];
            };
          };
        };
        /** @description Bad request - invalid query parameters */
        400: {
          content: never;
        };
        /** @description Internal server error. */
        500: {
          content: never;
        };
      };
    };
  };
  "/key_loans": {
    /**
     * List all key loans
     * @description Fetches a list of all key loans ordered by creation date.
     */
    get: {
      responses: {
        /** @description A list of key loans. */
        200: {
          content: {
            "application/json": {
              content?: components["schemas"]["KeyLoan"][];
            };
          };
        };
        /** @description An error occurred while listing key loans. */
        500: {
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
      };
    };
    /**
     * Create a new key loan
     * @description Create a new key loan record.
     */
    post: {
      requestBody: {
        content: {
          "application/json": {
            /**
             * @description JSON string array of key IDs.
             * @example [1, 2, 3]
             */
            keys?: string;
            /**
             * @description Contact information (email, phone, etc.).
             * @example john.doe@email.com
             */
            contact?: string;
            /**
             * @description Lease identifier or reference.
             * @example LEASE-2025-001
             */
            lease?: string;
            /**
             * Format: date-time
             * @description When keys were picked up.
             * @example 2025-09-19T14:30:00.000Z
             */
            picked_up_at?: string;
            /**
             * Format: date-time
             * @description When keys become available for next tenant.
             * @example 2025-12-01T00:00:00.000Z
             */
            available_to_next_tenant_from?: string;
            /**
             * @description Who created this record.
             * @example admin-user-123
             */
            created_by?: string;
          };
        };
      };
      responses: {
        /** @description Key loan created successfully. */
        201: {
          content: {
            "application/json": {
              content?: components["schemas"]["KeyLoan"];
            };
          };
        };
        /** @description Invalid request data. */
        400: {
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
        /** @description An error occurred while creating the key loan. */
        500: {
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
      };
    };
  };
  "/key_loans/{id}": {
    /**
     * Get key loan by ID
     * @description Fetch a specific key loan by its ID.
     */
    get: {
      parameters: {
        path: {
          /** @description The unique ID of the key loan to retrieve. */
          id: string;
        };
      };
      responses: {
        /** @description A key loan object. */
        200: {
          content: {
            "application/json": {
              content?: components["schemas"]["KeyLoan"];
            };
          };
        };
        /** @description Key loan not found. */
        404: {
          content: {
            "application/json": components["schemas"]["NotFoundResponse"];
          };
        };
        /** @description An error occurred while fetching the key loan. */
        500: {
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
      };
    };
    /**
     * Delete a key loan
     * @description Delete an existing key loan by ID.
     */
    delete: {
      parameters: {
        path: {
          /** @description The unique ID of the key loan to delete. */
          id: string;
        };
      };
      responses: {
        /** @description Key loan deleted successfully. */
        200: {
          content: never;
        };
        /** @description Key loan not found. */
        404: {
          content: {
            "application/json": components["schemas"]["NotFoundResponse"];
          };
        };
        /** @description An error occurred while deleting the key loan. */
        500: {
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
      };
    };
    /**
     * Update a key loan
     * @description Partially update an existing key loan.
     */
    patch: {
      parameters: {
        path: {
          /** @description The unique ID of the key loan to update. */
          id: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            /**
             * @description JSON string array of key IDs.
             * @example [1, 2]
             */
            keys?: string;
            /**
             * @description Contact information.
             * @example updated.email@email.com
             */
            contact?: string;
            /**
             * @description Lease identifier.
             * @example LEASE-2025-002
             */
            lease?: string;
            /**
             * Format: date-time
             * @description When keys were returned.
             * @example 2025-09-19T16:00:00.000Z
             */
            returned_at?: string;
            /**
             * Format: date-time
             * @description When keys become available for next tenant.
             */
            available_to_next_tenant_from?: string;
            /**
             * Format: date-time
             * @description When keys were picked up.
             */
            picked_up_at?: string;
            /**
             * @description Who updated this record.
             * @example admin-user-456
             */
            updated_by?: string;
          };
        };
      };
      responses: {
        /** @description Key loan updated successfully. */
        200: {
          content: {
            "application/json": {
              content?: components["schemas"]["KeyLoan"];
            };
          };
        };
        /** @description Invalid request data. */
        400: {
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
        /** @description Key loan not found. */
        404: {
          content: {
            "application/json": components["schemas"]["NotFoundResponse"];
          };
        };
        /** @description An error occurred while updating the key loan. */
        500: {
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
      };
    };
  };
  "/keys": {
    /**
     * List keys
     * @description Returns keys ordered by created_at (desc).
     */
    get: {
      responses: {
        /** @description List of keys */
        200: {
          content: {
            "application/json": {
              content?: components["schemas"]["Key"][];
            };
          };
        };
        /** @description Server error */
        500: {
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
      };
    };
    /** Create a key */
    post: {
      requestBody: {
        content: {
          "application/json": {
            /** @example Front door A */
            key_name: string;
            /** @example 101 */
            key_sequence_number?: number;
            /** @example 1 */
            flex_number?: number;
            /** @example APT-1001 */
            rental_object?: string;
            /**
             * @example LGH
             * @enum {string}
             */
            key_type: "LGH" | "PB" | "FS" | "HN";
            /**
             * Format: uuid
             * @example null
             */
            key_system_id?: string | null;
          };
        };
      };
      responses: {
        /** @description Created */
        201: {
          content: {
            "application/json": {
              content?: components["schemas"]["Key"];
            };
          };
        };
        /** @description Invalid key_type */
        400: {
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
        /** @description Server error */
        500: {
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
      };
    };
  };
  "/keys/{id}": {
    /** Get key by ID */
    get: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** @description Key found */
        200: {
          content: {
            "application/json": {
              content?: components["schemas"]["Key"];
            };
          };
        };
        /** @description Not found */
        404: {
          content: {
            "application/json": components["schemas"]["NotFoundResponse"];
          };
        };
        /** @description Server error */
        500: {
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
      };
    };
    /** Delete a key */
    delete: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** @description Deleted */
        200: {
          content: never;
        };
        /** @description Not found */
        404: {
          content: {
            "application/json": components["schemas"]["NotFoundResponse"];
          };
        };
        /** @description Server error */
        500: {
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
      };
    };
    /** Update a key (partial) */
    patch: {
      parameters: {
        path: {
          id: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            /** @example Front door A (updated) */
            key_name?: string;
            key_sequence_number?: number;
            flex_number?: number;
            rental_object?: string;
            /** @enum {string} */
            key_type?: "LGH" | "PB" | "FS" | "HN";
            /** Format: uuid */
            key_system_id?: string | null;
          };
        };
      };
      responses: {
        /** @description Updated */
        200: {
          content: {
            "application/json": {
              content?: components["schemas"]["Key"];
            };
          };
        };
        /** @description Invalid key_type */
        400: {
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
        /** @description Not found */
        404: {
          content: {
            "application/json": components["schemas"]["NotFoundResponse"];
          };
        };
        /** @description Server error */
        500: {
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
      };
    };
  };
  "/key_systems": {
    /**
     * List all key systems
     * @description Retrieve a list of all key systems
     */
    get: {
      responses: {
        /** @description Successfully retrieved key systems */
        200: {
          content: {
            "application/json": {
              content?: components["schemas"]["KeySystem"][];
            };
          };
        };
        /** @description Internal server error */
        500: {
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
      };
    };
    /**
     * Create a new key system
     * @description Create a new key system
     */
    post: {
      requestBody: {
        content: {
          "application/json": {
            /** @description Unique system code */
            system_code: string;
            /** @description Name of the key system */
            name: string;
            /**
             * @description Type of key system
             * @enum {string}
             */
            type: "MECHANICAL" | "ELECTRONIC" | "HYBRID";
            /** @description Description of the key system */
            description?: string;
          };
        };
      };
      responses: {
        /** @description Key system created successfully */
        201: {
          content: {
            "application/json": {
              content?: components["schemas"]["KeySystem"];
            };
          };
        };
        /** @description Invalid type or duplicate system code */
        400: {
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
        /** @description Internal server error */
        500: {
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
      };
    };
  };
  "/key_systems/{id}": {
    /**
     * Get key system by ID
     * @description Retrieve a specific key system by its ID
     */
    get: {
      parameters: {
        path: {
          /** @description The ID of the key system */
          id: string;
        };
      };
      responses: {
        /** @description Successfully retrieved key system */
        200: {
          content: {
            "application/json": {
              content?: components["schemas"]["KeySystem"];
            };
          };
        };
        /** @description Key system not found */
        404: {
          content: {
            "application/json": components["schemas"]["NotFoundResponse"];
          };
        };
        /** @description Internal server error */
        500: {
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
      };
    };
    /**
     * Delete a key system
     * @description Delete a key system by ID
     */
    delete: {
      parameters: {
        path: {
          /** @description The ID of the key system to delete */
          id: string;
        };
      };
      responses: {
        /** @description Key system deleted successfully */
        200: {
          content: never;
        };
        /** @description Key system not found */
        404: {
          content: {
            "application/json": components["schemas"]["NotFoundResponse"];
          };
        };
        /** @description Internal server error */
        500: {
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
      };
    };
    /**
     * Update a key system
     * @description Partially update a key system
     */
    patch: {
      parameters: {
        path: {
          /** @description The ID of the key system to update */
          id: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            /** @description Unique system code */
            system_code?: string;
            /** @description Name of the key system */
            name?: string;
            /**
             * @description Type of key system
             * @enum {string}
             */
            type?: "MECHANICAL" | "ELECTRONIC" | "HYBRID";
            /** @description Description of the key system */
            description?: string;
          };
        };
      };
      responses: {
        /** @description Key system updated successfully */
        200: {
          content: {
            "application/json": {
              content?: components["schemas"]["KeySystem"];
            };
          };
        };
        /** @description Invalid type or duplicate system code */
        400: {
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
        /** @description Key system not found */
        404: {
          content: {
            "application/json": components["schemas"]["NotFoundResponse"];
          };
        };
        /** @description Internal server error */
        500: {
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
      };
    };
  };
  "/logs": {
    /**
     * List logs
     * @description Returns logs ordered by event_time (desc).
     */
    get: {
      responses: {
        /** @description List of logs */
        200: {
          content: {
            "application/json": {
              content?: components["schemas"]["Log"][];
            };
          };
        };
        /** @description Server error */
        500: {
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
      };
    };
    /** Create a log */
    post: {
      requestBody: {
        content: {
          "application/json": {
            /** @example seb */
            user_name: string;
            /**
             * @example creation
             * @enum {string}
             */
            event_type: "creation" | "update" | "delete";
            /**
             * @example key
             * @enum {string}
             */
            object_type: "key" | "key_system" | "key_loan";
            /** @example Initial import */
            description?: string;
          };
        };
      };
      responses: {
        /** @description Created */
        201: {
          content: {
            "application/json": {
              content?: components["schemas"]["Log"];
            };
          };
        };
        /** @description Invalid or missing fields */
        400: {
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
        /** @description Server error */
        500: {
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
      };
    };
  };
  "/logs/{id}": {
    /** Get log by ID */
    get: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** @description Log found */
        200: {
          content: {
            "application/json": {
              content?: components["schemas"]["Log"];
            };
          };
        };
        /** @description Not found */
        404: {
          content: {
            "application/json": components["schemas"]["NotFoundResponse"];
          };
        };
        /** @description Server error */
        500: {
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
      };
    };
    /** Delete a log */
    delete: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** @description Deleted */
        200: {
          content: never;
        };
        /** @description Not found */
        404: {
          content: {
            "application/json": components["schemas"]["NotFoundResponse"];
          };
        };
        /** @description Server error */
        500: {
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
      };
    };
    /** Update a log (partial) */
    patch: {
      parameters: {
        path: {
          id: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            user_name?: string;
            /** @enum {string} */
            event_type?: "creation" | "update" | "delete";
            /** @enum {string} */
            object_type?: "key" | "key_system" | "key_loan";
            description?: string;
          };
        };
      };
      responses: {
        /** @description Updated */
        200: {
          content: {
            "application/json": {
              content?: components["schemas"]["Log"];
            };
          };
        };
        /** @description Invalid event_type or object_type */
        400: {
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
        /** @description Not found */
        404: {
          content: {
            "application/json": components["schemas"]["NotFoundResponse"];
          };
        };
        /** @description Server error */
        500: {
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    Lease: {
      leaseId: string;
      leaseNumber: string;
      /** Format: date-time */
      leaseStartDate: string;
      /** Format: date-time */
      leaseEndDate?: string;
      /** @enum {string} */
      status: "Current" | "Upcoming" | "AboutToEnd" | "Ended";
      tenantContactIds?: string[];
      rentalPropertyId: string;
      rentalProperty?: {
        rentalPropertyId: string;
        apartmentNumber: number;
        size: number;
        type: string;
        address?: {
          street: string;
          number: string;
          postalCode: string;
          city: string;
        };
        rentalPropertyType: string;
        additionsIncludedInRent: string;
        otherInfo?: string;
        roomTypes?: {
            roomTypeId: string;
            name: string;
          }[];
        /** Format: date-time */
        lastUpdated?: string;
      };
      type: string;
      rentInfo?: {
        currentRent: {
          rentId?: string;
          leaseId?: string;
          currentRent: number;
          vat: number;
          additionalChargeDescription?: string;
          additionalChargeAmount?: number;
          /** Format: date-time */
          rentStartDate?: string;
          /** Format: date-time */
          rentEndDate?: string;
        };
      };
      address?: {
        street: string;
        number: string;
        postalCode: string;
        city: string;
      };
      noticeGivenBy?: string;
      /** Format: date-time */
      noticeDate?: string;
      noticeTimeTenant?: string;
      /** Format: date-time */
      preferredMoveOutDate?: string;
      /** Format: date-time */
      terminationDate?: string;
      /** Format: date-time */
      contractDate?: string;
      /** Format: date-time */
      lastDebitDate?: string;
      /** Format: date-time */
      approvalDate?: string;
      residentialArea?: {
        code: string;
        caption: string;
      };
      tenants?: {
          contactCode: string;
          contactKey: string;
          leaseIds?: string[];
          firstName: string;
          lastName: string;
          fullName: string;
          nationalRegistrationNumber: string;
          /** Format: date-time */
          birthDate: string;
          address?: {
            street: string;
            number: string;
            postalCode: string;
            city: string;
          };
          phoneNumbers?: {
              phoneNumber: string;
              type: string;
              isMainNumber: boolean;
            }[];
          emailAddress?: string;
          isTenant: boolean;
          parkingSpaceWaitingList?: {
            /** Format: date-time */
            queueTime: string;
            queuePoints: number;
            type: number;
          };
          specialAttention?: boolean;
        }[];
    };
    WorkOrder: {
      accessCaption: string;
      caption: string;
      code: string;
      contactCode: string;
      description: string;
      detailsCaption: string;
      externalResource: boolean;
      id: string;
      /** Format: date-time */
      lastChanged: string;
      priority: string;
      /** Format: date-time */
      registered: string;
      dueDate: ("null" | null) | string;
      rentalObjectCode: string;
      status: string;
      hiddenFromMyPages?: boolean;
      workOrderRows: ({
          description: string | null;
          locationCode: string | null;
          equipmentCode: string | null;
        })[];
      messages?: {
          id: number;
          body: string;
          messageType: string;
          author: string;
          /** Format: date-time */
          createDate: string;
        }[];
      url?: string;
    };
    XpandWorkOrder: {
      accessCaption: string;
      caption: string | null;
      code: string;
      contactCode: string | null;
      id: string;
      /** Format: date-time */
      lastChanged: string;
      priority: string | null;
      /** Format: date-time */
      registered: string;
      dueDate: ("null" | null) | string;
      rentalObjectCode: string;
      status: string;
    };
    Building: {
      id: string;
      code: string;
      name: string;
      buildingType: {
        id: string;
        code: string;
        name: string;
      };
      construction: {
        constructionYear: number;
        renovationYear: number;
        valueYear: number | null;
      };
      features: {
        heating: string | null;
        fireRating: string | null;
      };
      insurance: {
        class: string | null;
        value: number | null;
      };
      deleted: boolean;
    };
    Company: {
      id: string;
      propertyObjectId: string;
      code: string;
      name: string;
      organizationNumber: string | null;
    };
    Property: {
      id: string;
      propertyObjectId: string;
      marketAreaId: string;
      districtId: string;
      propertyDesignationId: string;
      valueAreaId: string | null;
      code: string;
      designation: string;
      municipality: string;
      tract: string;
      block: string;
      sector: string | null;
      propertyIndexNumber: string | null;
      congregation: string;
      builtStatus: number;
      separateAssessmentUnit: number;
      consolidationNumber: string;
      ownershipType: string;
      registrationDate: string | null;
      acquisitionDate: string | null;
      isLeasehold: number;
      leaseholdTerminationDate: string | null;
      area: string | null;
      purpose: string | null;
      buildingType: string | null;
      propertyTaxNumber: string | null;
      mainPartAssessedValue: number;
      includeInAssessedValue: number;
      grading: number;
      deleteMark: number;
      /** Format: date-time */
      fromDate: string;
      /** Format: date-time */
      toDate: string;
      timestamp: string;
    };
    Residence: {
      id: string;
      code: string;
      name: string;
      deleted: boolean;
      validityPeriod: {
        /** Format: date-time */
        fromDate: string;
        /** Format: date-time */
        toDate: string;
      };
    };
    ResidenceDetails: {
      id: string;
      code: string;
      name: string | null;
      /** @enum {string|null} */
      status: "VACANT" | "LEASED" | null;
      location: string | null;
      accessibility: {
        wheelchairAccessible: boolean;
        residenceAdapted: boolean;
        elevator: boolean;
      };
      features: {
        balcony1?: {
          location: string;
          type: string;
        };
        balcony2?: {
          location: string;
          type: string;
        };
        patioLocation: string | null;
        hygieneFacility: string | null;
        sauna: boolean;
        extraToilet: boolean;
        sharedKitchen: boolean;
        petAllergyFree: boolean;
        /** @description Is the apartment checked for electric allergy intolerance? */
        electricAllergyIntolerance: boolean;
        smokeFree: boolean;
        asbestos: boolean;
      };
      floor: string | null;
      partNo?: number | null;
      part?: string | null;
      deleted: boolean;
      validityPeriod: {
        /** Format: date-time */
        fromDate: string;
        /** Format: date-time */
        toDate: string;
      };
      residenceType: {
        residenceTypeId: string;
        code: string;
        name: string | null;
        roomCount: number | null;
        kitchen: number;
        systemStandard: number;
        checklistId: string | null;
        componentTypeActionId: string | null;
        statisticsGroupSCBId: string | null;
        statisticsGroup2Id: string | null;
        statisticsGroup3Id: string | null;
        statisticsGroup4Id: string | null;
        timestamp: string;
      };
      propertyObject: {
        energy: {
          energyClass: number;
          /** Format: date-time */
          energyRegistered?: string;
          /** Format: date-time */
          energyReceived?: string;
          energyIndex?: number;
        };
        rentalId: string | null;
        rentalInformation: ({
          type: {
            code: string;
            name: string | null;
          };
        }) | null;
      };
      property: {
        name: string | null;
        code: string | null;
      };
      building: {
        name: string | null;
        code: string | null;
      };
      malarEnergiFacilityId: string | null;
      size: number | null;
    };
    Staircase: {
      id: string;
      code: string;
      name: string | null;
      features: {
        floorPlan: string | null;
        accessibleByElevator: boolean;
      };
      dates: {
        /** Format: date-time */
        from: string;
        /** Format: date-time */
        to: string;
      };
      deleted: boolean;
      /** Format: date-time */
      timestamp: string;
    };
    Room: {
      id: string;
      code: string;
      name: string | null;
      usage: {
        shared: boolean;
        allowPeriodicWorks: boolean;
        spaceType: number;
      };
      features: {
        hasToilet: boolean;
        isHeated: boolean;
        hasThermostatValve: boolean;
        orientation: number;
      };
      dates: {
        /** Format: date-time */
        installation: string | null;
        /** Format: date-time */
        from: string;
        /** Format: date-time */
        to: string;
        /** Format: date-time */
        availableFrom: string | null;
        /** Format: date-time */
        availableTo: string | null;
      };
      sortingOrder: number;
      deleted: boolean;
      timestamp: string;
      roomType: ({
        id: string;
        code: string;
        name: string | null;
        use: number;
        optionAllowed: number;
        isSystemStandard: number;
        allowSmallRoomsInValuation: number;
        timestamp: string;
      }) | null;
    };
    ParkingSpace: {
      rentalId: string;
      companyCode: string;
      companyName: string;
      managementUnitCode: string;
      managementUnitName: string;
      propertyCode: string;
      propertyName: string;
      buildingCode: string | null;
      buildingName: string | null;
      parkingSpace: {
        propertyObjectId: string;
        code: string;
        name: string;
        parkingNumber: string;
        parkingSpaceType: {
          code: string;
          name: string;
        };
      };
      address: {
        streetAddress: string | null;
        streetAddress2: string | null;
        postalCode: string | null;
        city: string | null;
      };
    };
    MaintenanceUnit: {
      id: string;
      rentalPropertyId?: string;
      code: string;
      caption: string | null;
      type?: string | null;
      estateCode: string | null;
      estate: string | null;
    };
    ResidenceByRentalIdDetails: {
      id: string;
      code: string;
      name: string | null;
      accessibility: {
        wheelchairAccessible: boolean;
        elevator: boolean;
      };
      features: {
        hygieneFacility: string | null;
      };
      entrance: string | null;
      floor: string | null;
      deleted: boolean;
      type: {
        code: string;
        name: string | null;
        roomCount: number | null;
        kitchen: number;
      };
      rentalInformation: ({
        apartmentNumber: string | null;
        rentalId: string | null;
        type: {
          code: string;
          name: string | null;
        };
      }) | null;
      property: {
        id: string | null;
        name: string | null;
        code: string | null;
      };
      building: {
        id: string | null;
        name: string | null;
        code: string | null;
      };
      areaSize: number | null;
    };
    FacilityDetails: {
      id: string;
      code: string;
      name: string | null;
      entrance: string | null;
      deleted: boolean;
      type: {
        code: string;
        name: string | null;
      };
      rentalInformation: ({
        apartmentNumber: string | null;
        rentalId: string | null;
        type: {
          code: string;
          name: string | null;
        };
      }) | null;
      property: {
        id: string | null;
        name: string | null;
        code: string | null;
      };
      building: {
        id: string | null;
        name: string | null;
        code: string | null;
      };
      areaSize: number | null;
    };
    SearchQueryParams: {
      /** @description The search query string used to find properties, buildings and residences */
      q: string;
    };
    PropertySearchResult: {
      /** @description Unique identifier for the search result */
      id: string;
      /**
       * @description Indicates this is a property result
       * @enum {string}
       */
      type: "property";
      /** @description Name or designation of the property */
      name: string;
    };
    BuildingSearchResult: {
      /** @description Unique identifier for the search result */
      id: string;
      /**
       * @description Indicates this is a building result
       * @enum {string}
       */
      type: "building";
      /** @description Name of the building */
      name: string | null;
      property?: ({
        /** @description Property associated with the building */
        name: string | null;
        id: string;
        code: string;
      }) | null;
    };
    ResidenceSearchResult: {
      /** @description Unique identifier for the search result */
      id: string;
      /**
       * @description Indicates this is a residence result
       * @enum {string}
       */
      type: "residence";
      /** @description Name of the residence */
      name: string | null;
      /** @description Rental object ID of the residence */
      rentalId: string | null;
      property: {
        code: string | null;
        /** @description Name of property associated with the residence */
        name: string | null;
      };
      building: {
        code: string | null;
        /** @description Name of building associated with the residence */
        name: string | null;
      };
    };
    /** @description A search result that can be either a property, building or residence */
    SearchResult: {
      /** @description Unique identifier for the search result */
      id: string;
      /**
       * @description Indicates this is a property result
       * @enum {string}
       */
      type: "property";
      /** @description Name or designation of the property */
      name: string;
    } | ({
      /** @description Unique identifier for the search result */
      id: string;
      /**
       * @description Indicates this is a building result
       * @enum {string}
       */
      type: "building";
      /** @description Name of the building */
      name: string | null;
      property?: ({
        /** @description Property associated with the building */
        name: string | null;
        id: string;
        code: string;
      }) | null;
    }) | ({
      /** @description Unique identifier for the search result */
      id: string;
      /**
       * @description Indicates this is a residence result
       * @enum {string}
       */
      type: "residence";
      /** @description Name of the residence */
      name: string | null;
      /** @description Rental object ID of the residence */
      rentalId: string | null;
      property: {
        code: string | null;
        /** @description Name of property associated with the residence */
        name: string | null;
      };
      building: {
        code: string | null;
        /** @description Name of building associated with the residence */
        name: string | null;
      };
    });
    Key: {
      /** Format: uuid */
      id?: string;
      key_name?: string;
      key_sequence_number?: number;
      flex_number?: number;
      rental_object?: string;
      /** @enum {string} */
      key_type?: "LGH" | "PB" | "FS" | "HN";
      /** Format: uuid */
      key_system_id?: string | null;
      /** Format: date-time */
      created_at?: string;
      /** Format: date-time */
      updated_at?: string;
    };
    KeyLoan: {
      /** Format: uuid */
      id?: string;
      /** @description JSON string array of key IDs */
      keys?: string;
      contact?: string;
      lease?: string;
      /** Format: date-time */
      returned_at?: string | null;
      /** Format: date-time */
      available_to_next_tenant_from?: string | null;
      /** Format: date-time */
      picked_up_at?: string | null;
      /** Format: date-time */
      created_at?: string;
      /** Format: date-time */
      updated_at?: string;
      created_by?: string | null;
      updated_by?: string | null;
    };
    KeySystem: {
      /** Format: uuid */
      id?: string;
      system_code?: string;
      name?: string;
      manufacturer?: string;
      /** @enum {string} */
      type?: "MECHANICAL" | "ELECTRONIC" | "HYBRID";
      property_ids?: string;
      /** Format: date-time */
      installation_date?: string | null;
      is_active?: boolean;
      description?: string | null;
      /** Format: date-time */
      created_at?: string;
      /** Format: date-time */
      updated_at?: string;
      created_by?: string | null;
      updated_by?: string | null;
    };
    Log: {
      /** Format: uuid */
      id?: string;
      /** @example seb */
      user_name?: string;
      /**
       * @example creation
       * @enum {string}
       */
      event_type?: "creation" | "update" | "delete";
      /**
       * @example key
       * @enum {string}
       */
      object_type?: "key" | "key_system" | "key_loan";
      /** Format: date-time */
      event_time?: string;
      /** @example Created key APT-1001 */
      description?: string | null;
    };
    ErrorResponse: {
      /** @example Internal server error */
      error?: string;
    };
    NotFoundResponse: {
      /** @example Resource not found */
      reason?: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export type operations = Record<string, never>;
