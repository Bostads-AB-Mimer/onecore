/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "openapi": {
  };
  "/health": {
    /**
     * Check system health status
     * @description Retrieves the health status of the system and its subsystems.
     */
    get: {
      responses: {
        /** @description Successful response with system health status */
        200: {
          content: {
            "application/json": {
              /**
               * @description Name of the system.
               * @example work-order
               */
              name?: string;
              /**
               * @description Overall status of the system ('active', 'impaired', 'failure', 'unknown').
               * @example active
               */
              status?: string;
              subsystems?: ({
                  /** @description Name of the subsystem. */
                  name?: string;
                  /**
                   * @description Status of the subsystem.
                   * @enum {string}
                   */
                  status?: "active" | "impaired" | "failure" | "unknown";
                  /** @description Additional details about the subsystem status. */
                  details?: string;
                })[];
            };
          };
        };
      };
    };
  };
  "/health/db": {
    /** Database connection pool metrics */
    get: {
      responses: {
        /** @description Connection pool stats per configured DB connection. */
        200: {
          content: {
            "application/json": {
              connectionPools?: number;
              metrics?: {
                  name?: string;
                  pool?: {
                    used?: number;
                    free?: number;
                    pendingCreates?: number;
                    pendingAcquires?: number;
                  };
                }[];
            };
          };
        };
      };
    };
  };
  "security": {
  };
  "/workOrders/contactCode/{contactCode}": {
    /**
     * Get work orders by contact code
     * @description Retrieves work orders based on the provided contact code.
     */
    get: {
      parameters: {
        path: {
          /** @description The contact code to filter work orders. */
          contactCode: string;
        };
      };
      responses: {
        /** @description Successfully retrieved work orders. */
        200: {
          content: {
            "application/json": {
              content?: {
                workOrders?: components["schemas"]["WorkOrder"][];
              };
              /** @description Route metadata */
              metadata?: Record<string, never>;
            };
          };
        };
        /** @description Internal server error. Failed to retrieve work orders. */
        500: {
          content: {
            "application/json": {
              /** @example Internal server error */
              error?: string;
              /** @description Route metadata */
              metadata?: Record<string, never>;
            };
          };
        };
      };
    };
  };
  "/workOrders/residenceId/{residenceId}": {
    /**
     * Get work orders by residence id
     * @description Retrieves work orders based on the provided residence id.
     */
    get: {
      parameters: {
        path: {
          /** @description The residence id to filter work orders. */
          residenceId: string;
        };
      };
      responses: {
        /** @description Successfully retrieved work orders. */
        200: {
          content: {
            "application/json": {
              content?: {
                workOrders?: components["schemas"]["WorkOrder"][];
              };
              /** @description Route metadata */
              metadata?: Record<string, never>;
            };
          };
        };
        /** @description Internal server error. Failed to retrieve work orders. */
        500: {
          content: {
            "application/json": {
              /** @example Internal server error */
              error?: string;
              /** @description Route metadata */
              metadata?: Record<string, never>;
            };
          };
        };
      };
    };
  };
  "/workOrders/propertyId/{propertyId}": {
    /**
     * Get work orders by property id
     * @description Retrieves work orders based on the provided property id.
     */
    get: {
      parameters: {
        path: {
          /** @description The property id to filter work orders. */
          propertyId: string;
        };
      };
      responses: {
        /** @description Successfully retrieved work orders. */
        200: {
          content: {
            "application/json": {
              content?: {
                workOrders?: components["schemas"]["WorkOrder"][];
              };
              /** @description Route metadata */
              metadata?: Record<string, never>;
            };
          };
        };
        /** @description Internal server error. Failed to retrieve work orders. */
        500: {
          content: {
            "application/json": {
              /** @example Internal server error */
              error?: string;
              /** @description Route metadata */
              metadata?: Record<string, never>;
            };
          };
        };
      };
    };
  };
  "/workOrders/buildingId/{buildingId}": {
    /**
     * Get work orders by building id
     * @description Retrieves work orders based on the provided building id.
     */
    get: {
      parameters: {
        path: {
          /** @description The building id to filter work orders. */
          buildingId: string;
        };
      };
      responses: {
        /** @description Successfully retrieved work orders. */
        200: {
          content: {
            "application/json": {
              content?: {
                workOrders?: components["schemas"]["WorkOrder"][];
              };
              /** @description Route metadata */
              metadata?: Record<string, never>;
            };
          };
        };
        /** @description Internal server error. Failed to retrieve work orders. */
        500: {
          content: {
            "application/json": {
              /** @example Internal server error */
              error?: string;
              /** @description Route metadata */
              metadata?: Record<string, never>;
            };
          };
        };
      };
    };
  };
  "/workOrders/xpand/residenceId/{residenceId}": {
    /**
     * Get work orders by residence id from xpand
     * @description Retrieves work orders from xpand based on the provided residence id.
     */
    get: {
      parameters: {
        query?: {
          /** @description The number of work orders to skip. */
          skip?: number;
          /** @description The number of work orders to fetch. */
          limit?: number;
          /** @description Whether to sort the work orders by ascending creation date. */
          sortAscending?: boolean;
        };
        path: {
          /** @description The residence id to filter work orders. */
          residenceId: string;
        };
      };
      responses: {
        /** @description Successfully retrieved work orders. */
        200: {
          content: {
            "application/json": {
              content?: {
                workOrders?: components["schemas"]["XpandWorkOrder"][];
              };
              /** @description Route metadata */
              metadata?: Record<string, never>;
            };
          };
        };
        /** @description Internal server error. Failed to retrieve work orders. */
        500: {
          content: {
            "application/json": {
              /** @example Internal server error */
              error?: string;
              /** @description Route metadata */
              metadata?: Record<string, never>;
            };
          };
        };
      };
    };
  };
  "/workOrders/xpand/propertyId/{propertyId}": {
    /**
     * Get work orders by property id from xpand
     * @description Retrieves work orders from xpand based on the provided property id.
     */
    get: {
      parameters: {
        query?: {
          /** @description The number of work orders to skip. */
          skip?: number;
          /** @description The number of work orders to fetch. */
          limit?: number;
          /** @description Whether to sort the work orders by ascending creation date. */
          sortAscending?: boolean;
        };
        path: {
          /** @description The property id to filter work orders. */
          propertyId: string;
        };
      };
      responses: {
        /** @description Successfully retrieved work orders. */
        200: {
          content: {
            "application/json": {
              content?: {
                workOrders?: components["schemas"]["XpandWorkOrder"][];
              };
              /** @description Route metadata */
              metadata?: Record<string, never>;
            };
          };
        };
        /** @description Internal server error. Failed to retrieve work orders. */
        500: {
          content: {
            "application/json": {
              /** @example Internal server error */
              error?: string;
              /** @description Route metadata */
              metadata?: Record<string, never>;
            };
          };
        };
      };
    };
  };
  "/workOrders/xpand/buildingId/{buildingId}": {
    /**
     * Get work orders by building id from xpand
     * @description Retrieves work orders from xpand based on the provided building id.
     */
    get: {
      parameters: {
        query?: {
          /** @description The number of work orders to skip. */
          skip?: number;
          /** @description The number of work orders to fetch. */
          limit?: number;
          /** @description Whether to sort the work orders by ascending creation date. */
          sortAscending?: boolean;
        };
        path: {
          /** @description The building id to filter work orders. */
          buildingId: string;
        };
      };
      responses: {
        /** @description Successfully retrieved work orders. */
        200: {
          content: {
            "application/json": {
              content?: {
                workOrders?: components["schemas"]["XpandWorkOrder"][];
              };
              /** @description Route metadata */
              metadata?: Record<string, never>;
            };
          };
        };
        /** @description Internal server error. Failed to retrieve work orders. */
        500: {
          content: {
            "application/json": {
              /** @example Internal server error */
              error?: string;
              /** @description Route metadata */
              metadata?: Record<string, never>;
            };
          };
        };
      };
    };
  };
  "/workOrders/xpand/{code}": {
    /**
     * Get work order details by work order code from xpand
     * @description Retrieves work order details from xpand.
     */
    get: {
      parameters: {
        path: {
          /** @description The work order code to fetch details for. */
          code: string;
        };
      };
      responses: {
        /** @description Successfully retrieved work order. */
        200: {
          content: {
            "application/json": {
              content?: components["schemas"]["XpandWorkOrderDetails"];
              /** @description Route metadata */
              metadata?: Record<string, never>;
            };
          };
        };
        /** @description Work order not found. */
        404: {
          content: {
            "application/json": {
              /** @example Work order not found */
              error?: string;
            };
          };
        };
        /** @description Internal server error. Failed to retrieve work order. */
        500: {
          content: {
            "application/json": {
              /** @example Internal server error */
              error?: string;
              /** @description Route metadata */
              metadata?: Record<string, never>;
            };
          };
        };
      };
    };
  };
  "/workOrders": {
    /**
     * Create a new work order
     * @description Creates a new work order based on the provided request body.
     */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["CreateWorkOrderBody"];
        };
      };
      responses: {
        /** @description Work order created successfully */
        200: {
          content: {
            "application/json": {
              content?: {
                /** @example 123 */
                newWorkOrderId?: number;
              };
              /** @description Route metadata */
              metadata?: Record<string, never>;
            };
          };
        };
        /** @description Bad request. Failed to create work order. */
        400: {
          content: {
            "application/json": {
              /** @example Error message from the adapter */
              error?: string;
              /** @description Route metadata */
              metadata?: Record<string, never>;
            };
          };
        };
        /** @description Internal server error. Failed to create work order. */
        500: {
          content: {
            "application/json": {
              /** @example Internal server error */
              error?: string;
              /** @description Route metadata */
              metadata?: Record<string, never>;
            };
          };
        };
      };
    };
  };
  "/workOrders/{workOrderId}/update": {
    /**
     * Add a message to a work order
     * @description Adds a message to a work order based on the provided work order ID.
     */
    post: {
      parameters: {
        path: {
          /** @description The ID of the work order to which the message will be added. */
          workOrderId: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            /**
             * @description The message to be added to the work order.
             * @example This is a new message for the work order.
             */
            message?: string;
          };
        };
      };
      responses: {
        /** @description Message added to the work order successfully */
        200: {
          content: {
            "application/json": {
              content?: {
                /** @example Message added to work order with ID {workOrderId} */
                message?: string;
              };
              /** @description Route metadata */
              metadata?: Record<string, never>;
            };
          };
        };
        /** @description Bad request. Message is missing from the request body. */
        400: {
          content: {
            "application/json": {
              /** @example Message is missing from the request body */
              reason?: string;
              /** @description Route metadata */
              metadata?: Record<string, never>;
            };
          };
        };
        /** @description Internal server error. Failed to add message to the work order. */
        500: {
          content: {
            "application/json": {
              /** @example Internal server error */
              error?: string;
              /** @description Route metadata */
              metadata?: Record<string, never>;
            };
          };
        };
      };
    };
  };
  "/workOrders/{workOrderId}/close": {
    /**
     * Close a work order
     * @description Closes a work order based on the provided work order ID.
     */
    post: {
      parameters: {
        path: {
          /** @description The ID of the work order to be closed. */
          workOrderId: string;
        };
      };
      responses: {
        /** @description Work order closed successfully */
        200: {
          content: {
            "application/json": {
              content?: {
                /** @example Work order with ID {workOrderId} updated successfully */
                message?: string;
              };
              /** @description Route metadata */
              metadata?: Record<string, never>;
            };
          };
        };
        /** @description Internal server error. Failed to close work order. */
        500: {
          content: {
            "application/json": {
              /** @example Failed to update work order with ID {workOrderId} */
              message?: string;
              /** @description Route metadata */
              metadata?: Record<string, never>;
            };
          };
        };
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    WorkOrder: {
      AccessCaption: string;
      Caption: string;
      Code: string;
      ContactCode: string;
      Description: string;
      DetailsCaption: string;
      ExternalResource: boolean;
      Id: string;
      /** Format: date-time */
      LastChanged: string;
      Priority: string;
      /** Format: date-time */
      Registered: string;
      DueDate: null | string;
      RentalObjectCode: string;
      Status: string;
      UseMasterKey: boolean;
      HiddenFromMyPages?: boolean;
      WorkOrderRows: ({
          Description: string | null;
          LocationCode: string | null;
          EquipmentCode: string | null;
        })[];
      Messages?: {
          id: number;
          body: string;
          messageType: string;
          author: string;
          /** Format: date-time */
          createDate: string;
        }[];
      Url?: string;
    };
    XpandWorkOrder: {
      AccessCaption: string;
      Caption: string | null;
      Code: string;
      ContactCode: string | null;
      Id: string;
      /** Format: date-time */
      LastChanged: string;
      Priority: string | null;
      /** Format: date-time */
      Registered: string;
      DueDate: null | string;
      RentalObjectCode: string;
      Status: string;
    };
    XpandWorkOrderDetails: {
      AccessCaption: string;
      Caption: string | null;
      Code: string;
      ContactCode: string | null;
      Description: string;
      Id: string;
      /** Format: date-time */
      LastChanged: string;
      Priority: string | null;
      /** Format: date-time */
      Registered: string;
      DueDate: null | string;
      RentalObjectCode: string;
      Status: string;
      WorkOrderRows: ({
          Description: string | null;
          LocationCode: string | null;
          EquipmentCode: string | null;
        })[];
    };
    CreateWorkOrderBody: {
      rentalProperty: {
        id: string;
        type: string;
        property: {
          address: string;
          code: string;
          entrance: string;
          floor: string;
          hasElevator: boolean;
          washSpace: string | null;
          area: number;
          estateCode: string;
          estate: string;
          buildingCode: string;
          building: string;
        };
        maintenanceUnits?: {
            id: string;
            rentalPropertyId: string;
            code: string;
            caption: string;
            type: string;
            estateCode: string;
            estate: string;
          }[];
      };
      tenant: {
        contactCode: string;
        contactKey: string;
        firstName?: string;
        lastName?: string;
        nationalRegistrationNumber?: string;
        phoneNumbers?: {
            phoneNumber: string;
            type: string;
            isMainNumber: number;
          }[];
        emailAddress?: string;
      };
      lease: {
        leaseId: string;
        leaseNumber: string;
        type: string;
        leaseStartDate: string;
        leaseEndDate?: unknown;
        contractDate?: string;
        approvalDate?: string;
      };
      details: {
        ContactCode: string;
        RentalObjectCode: string;
        AccessOptions: {
          Type: number;
          PhoneNumber: string | null;
          Email: string;
          CallBetween: string;
        };
        HearingImpaired: boolean;
        Pet: string;
        Rows: {
            LocationCode: string;
            PartOfBuildingCode: string;
            Description: string;
            MaintenanceUnitCode?: unknown;
            MaintenanceUnitCaption?: unknown;
          }[];
        Images: {
            Filename: string;
            ImageType: number;
            Base64String: string;
          }[];
      };
    };
    CreateWorkOrderDetails: {
      ContactCode: string;
      RentalObjectCode: string;
      AccessOptions: {
        Type: number;
        PhoneNumber: string | null;
        Email: string;
        CallBetween: string;
      };
      HearingImpaired: boolean;
      Pet: string;
      Rows: {
          LocationCode: string;
          PartOfBuildingCode: string;
          Description: string;
          MaintenanceUnitCode?: unknown;
          MaintenanceUnitCaption?: unknown;
        }[];
      Images: {
          Filename: string;
          ImageType: number;
          Base64String: string;
        }[];
    };
    Lease: {
      leaseId: string;
      leaseNumber: string;
      type: string;
      leaseStartDate: string;
      leaseEndDate?: unknown;
      contractDate?: string;
      approvalDate?: string;
    };
    Tenant: {
      contactCode: string;
      contactKey: string;
      firstName?: string;
      lastName?: string;
      nationalRegistrationNumber?: string;
      phoneNumbers?: {
          phoneNumber: string;
          type: string;
          isMainNumber: number;
        }[];
      emailAddress?: string;
    };
    RentalProperty: {
      id: string;
      type: string;
      property: {
        address: string;
        code: string;
        entrance: string;
        floor: string;
        hasElevator: boolean;
        washSpace: string | null;
        area: number;
        estateCode: string;
        estate: string;
        buildingCode: string;
        building: string;
      };
      maintenanceUnits?: {
          id: string;
          rentalPropertyId: string;
          code: string;
          caption: string;
          type: string;
          estateCode: string;
          estate: string;
        }[];
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export type operations = Record<string, never>;
